export default "{\"documentCount\":99,\"nextId\":99,\"documentIds\":{\"0\":\"0\",\"1\":\"2\",\"2\":\"2#任务\",\"3\":\"2#学习过程\",\"4\":\"2#遇到的问题\",\"5\":\"2#总结\",\"6\":\"2@0\",\"7\":\"3\",\"8\":\"3#个人信息\",\"9\":\"3#毕业院校\",\"10\":\"3#专业技能\",\"11\":\"3#工作经历【在校生无】\",\"12\":\"3#项目经验\",\"13\":\"3#_1-营销活动平台-lottery-微服务抽奖系统\",\"14\":\"3#_2-手写-mybatis\",\"15\":\"3#_3-openai-应用服务-辅助工作提效工具开发\",\"16\":\"3#_4-服务治理-springboot-中间件\",\"17\":\"3@0\",\"18\":\"4\",\"19\":\"4#任务\",\"20\":\"4#学习过程\",\"21\":\"4#遇到的问题\",\"22\":\"4#总结\",\"23\":\"4@0\",\"24\":\"5\",\"25\":\"5#任务\",\"26\":\"5#学习过程\",\"27\":\"5#遇到的问题\",\"28\":\"5#总结\",\"29\":\"5@0\",\"30\":\"6\",\"31\":\"6#任务\",\"32\":\"6#学习过程\",\"33\":\"6#遇到的问题\",\"34\":\"6#总结\",\"35\":\"6@0\",\"36\":\"7\",\"37\":\"7#任务\",\"38\":\"7#学习过程\",\"39\":\"7#遇到的问题\",\"40\":\"7#总结\",\"41\":\"7@0\",\"42\":\"8\",\"43\":\"8#任务\",\"44\":\"8#学习过程\",\"45\":\"8#遇到的问题\",\"46\":\"8#总结\",\"47\":\"8@0\",\"48\":\"9\",\"49\":\"9#任务\",\"50\":\"9#学习过程\",\"51\":\"9#遇到的问题\",\"52\":\"9#总结\",\"53\":\"9@0\",\"54\":\"10\",\"55\":\"10#任务\",\"56\":\"10#学习过程\",\"57\":\"10#遇到的问题\",\"58\":\"10#总结\",\"59\":\"10@0\",\"60\":\"11\",\"61\":\"11#任务\",\"62\":\"11#学习过程\",\"63\":\"11#遇到的问题\",\"64\":\"11#总结\",\"65\":\"11@0\",\"66\":\"12\",\"67\":\"12#任务\",\"68\":\"12#学习过程\",\"69\":\"12#遇到的问题\",\"70\":\"12#总结\",\"71\":\"12@0\",\"72\":\"13\",\"73\":\"13@0\",\"74\":\"14\",\"75\":\"14#任务\",\"76\":\"14#学习过程\",\"77\":\"14#遇到的问题\",\"78\":\"14#总结\",\"79\":\"14@0\",\"80\":\"15\",\"81\":\"15#任务\",\"82\":\"15#学习过程\",\"83\":\"15#遇到的问题\",\"84\":\"15#总结\",\"85\":\"15@0\",\"86\":\"16\",\"87\":\"16#任务\",\"88\":\"16#学习过程\",\"89\":\"16#遇到的问题\",\"90\":\"16#总结\",\"91\":\"16@0\",\"92\":\"17\",\"93\":\"17#任务\",\"94\":\"17#学习过程\",\"95\":\"17#遇到的问题\",\"96\":\"17#总结\",\"97\":\"17@0\",\"98\":\"18\"},\"fieldIds\":{\"h\":0,\"t\":1,\"c\":2},\"fieldLength\":{\"0\":[1,2],\"1\":[1],\"2\":[1,6],\"3\":[1,94],\"4\":[1,79],\"5\":[1,75],\"6\":[null,null,3],\"7\":[1],\"8\":[1,9],\"9\":[1,6],\"10\":[1,124],\"11\":[3,7],\"12\":[1],\"13\":[4,96],\"14\":[3,69],\"15\":[4,90],\"16\":[4,34],\"17\":[null,null,3],\"18\":[1],\"19\":[1,6],\"20\":[1,94],\"21\":[1,79],\"22\":[1,75],\"23\":[null,null,3],\"24\":[1],\"25\":[1,6],\"26\":[1,94],\"27\":[1,79],\"28\":[1,75],\"29\":[null,null,3],\"30\":[1],\"31\":[1,6],\"32\":[1,94],\"33\":[1,79],\"34\":[1,75],\"35\":[null,null,3],\"36\":[1],\"37\":[1,6],\"38\":[1,94],\"39\":[1,79],\"40\":[1,75],\"41\":[null,null,3],\"42\":[1],\"43\":[1,6],\"44\":[1,94],\"45\":[1,79],\"46\":[1,75],\"47\":[null,null,3],\"48\":[1],\"49\":[1,6],\"50\":[1,94],\"51\":[1,79],\"52\":[1,75],\"53\":[null,null,3],\"54\":[1],\"55\":[1,6],\"56\":[1,94],\"57\":[1,79],\"58\":[1,75],\"59\":[null,null,3],\"60\":[1],\"61\":[1,6],\"62\":[1,94],\"63\":[1,79],\"64\":[1,92],\"65\":[null,null,2],\"66\":[1],\"67\":[1,6],\"68\":[1,94],\"69\":[1,79],\"70\":[1,75],\"71\":[null,null,3],\"72\":[1],\"73\":[null,null,2],\"74\":[1],\"75\":[1,6],\"76\":[1,94],\"77\":[1,79],\"78\":[1,75],\"79\":[null,null,3],\"80\":[1],\"81\":[1,6],\"82\":[1,94],\"83\":[1,79],\"84\":[1,75],\"85\":[null,null,3],\"86\":[1],\"87\":[1,6],\"88\":[1,94],\"89\":[1,79],\"90\":[1,75],\"91\":[null,null,3],\"92\":[1],\"93\":[1,6],\"94\":[1,94],\"95\":[1,79],\"96\":[1,75],\"97\":[null,null,3],\"98\":[1,3]},\"averageFieldLength\":[1.1827913272828314,58.10767855709821,1.1257471469959255],\"storedFields\":{\"0\":{\"h\":\"介绍页\",\"t\":[\"将你的个人介绍和档案放置在此处。\"]},\"1\":{\"h\":\"文档\"},\"2\":{\"h\":\"任务\",\"t\":[\" 环境配置\",\" 搭建项目结构\",\" 跑通广播模式 RPC 过程调用\"]},\"3\":{\"h\":\"学习过程\",\"t\":[\"项目整体了解\",\"通过对第一节文档的阅读，了解整个项目的生命周期、所需要的技术以及代码提交规范\",\"搭建项目结构，理解每个模块应该干什么\",\"模块\",\"作用\",\"Lottery\",\"总项目，用来管理整个项目的依赖\",\"lottery-application\",\"应用层，为用户接口层提供各种应用数据展现支持服务\",\"lottery-common\",\"定义通用数据，比如统一响应数据、常量、异常、枚举等\",\"lottery-domain\",\"领域层，核心业务逻辑\",\"lottery-infrastructure\",\"基础层，为其他各层提供通用技术能力，包括数据库、Redis、ES 等\",\"lottery-interfaces\",\"用户接口层，存放与前端交互、展现数据相关的代码\",\"lottery-rpc\",\"RPC 接口文件\",\"注：因为并不了解 DDD 架构，所以每个模块目前只有模糊的概念，具体的东西在后续代码编写中进行体会\",\"阅读 210801_xfg_initProject 分支上的 POM 文件\",\"通过对 POM 文件的阅读，更加清楚的了解这个项目所使用的技术，并且通过阅读发现项目没有添加 Lombok 来简化开发，具体项目开发是否使用这个插件我不知道，但是我想用，因为我懒，所以就给加上了😄\",\"跑通 RPC\",\"定义 response 状态码枚举供通用返回对象 Result 进行使用\",\"定义通用返回对象 Result 类\",\"定义 activity 表的持久化对象\",\"定义 activity 表的 Mapper 接口\",\"定义 mybatis 配置文件\",\"定义 activity 表的 mapper.xml 文件\",\"定义 rpc 的数据传输对象(DTO) ActivityDto\",\"定义 rpc 的 请求对象 ActivityReq\",\"定义 rpc 的响应对象 ActivityRes\",\"定义 rpc 接口 IActivityBooth\",\"实现 IActivityBooth 接口\",\"编写启动类\",\"编写配置文件 application.yml\",\"编写测试模块 这个我是直接加在工程里面的，教程是单独开了一个项目\"]},\"4\":{\"h\":\"遇到的问题\",\"t\":[\"代码分层不清晰，不知道每个模块应该干什么事\",\"这个问题该怎么解决呢？我觉得最好的解决办法就是不解决，哈哈哈，因为当初学 MVC 的时候最开始也不清楚为什么要这样分层，为什么就要分 Controller、Service 和 DAO，但是后来经过大量代码的编写，也逐渐熟悉了这样的分层架构，所以现在并不想解决这个问题，具体还是靠后面的代码进行了解和熟悉吧\",\"JSON.toJSonString() 方法返回了空 {}\",\"问题出现原因，忘了加 @Data 注解，导致没有 getter/setter 就导致了这个问题，加上注解即可\",\"解决！\",\"数据库乱码问题\",\"测试模块 RPC 远程调用返回的结果为:\",\"测试结果：{\\\"activity\\\":{\\\"activityDesc\\\":\\\"?????????\\\",\\\"activityId\\\":100002,\\\"activityName\\\":\\\"????\\\",\\\"beginDateTime\\\":1705215282000,\\\"endDateTime\\\":1705215282000,\\\"stockCount\\\":100,\\\"takeCount\\\":10},\\\"result\\\":{\\\"code\\\":\\\"0000\\\",\\\"info\\\":\\\"成功\\\"}}\",\"明显的乱码问题，查看数据库，发现插入的时候就以及乱码了，看了一下配置文件中的数据库连接 url，发现使用了 useUnicode=true，并没有指定字符集，所以添加一下 utf-8 字符集即可，完整 url: jdbc:mysql://127.0.0.1:3306/lottery?useUnicode=true&characterEncoding=UTF-8\",\"再进行一轮测试，测试结果：\",\"测试结果：{\\\"activity\\\":{\\\"activityDesc\\\":\\\"仅用于插入数据测试\\\",\\\"activityId\\\":100003,\\\"activityName\\\":\\\"测试活动\\\",\\\"beginDateTime\\\":1705218054000,\\\"endDateTime\\\":1705218054000,\\\"stockCount\\\":100,\\\"takeCount\\\":10},\\\"result\\\":{\\\"code\\\":\\\"0000\\\",\\\"info\\\":\\\"成功\\\"}}\",\"解决！\"]},\"5\":{\"h\":\"总结\",\"t\":[\"今天干了说明呢？\",\"配置环境\",\"跑通 RPC\",\"具体怎么跑通 RPC 的呢？\",\"在 common 模块创建通用类\",\"在 infrastructure 模块创建 dao 接口以及和数据库相对应的 po 类\",\"在 rpc 模块下创建 RPC 通信接口以及对应的请求和响应的封装类\",\"然后在 interfaces 模块下实现 rpc 模块的接口，在这里调用 Mapper 进行增删改查\",\"然后就写配置呗，SpringBoot 配置、Dubbo 配置、MyBatis 配置\",\"学到了什么呢？\",\"由于之前学习一直使用的是 MVC 架构，并且命名不太规范，所以对于包的命名现在很不适应，比如什么dto、vo啥的各种 o 不太熟悉，这个就不准备纠结了，准备靠代码量进行熟悉\",\"对每个模块有了大概的了解，至少知道了接口写在哪个模块，接口实现类在哪个模块以及 Mapper 写在哪\",\"现在在我眼中，这个 interfaces 模块，就跟以前学的 Dubbo 的服务提供者一样吧？因为这个模块用来实现接口的，所以就会引用其他模块，要调用其他模块的东西就要添加依赖，所以这个模块起起来之后，就带动了所有模块，整个项目也就 run 起来了\",\"第一天，脑子还有点迷糊，因为基础不太牢固，所以有些小 bug 花费了挺长时间的，但是至少是跑起来了吧？也还行，路虽远，行则将至嘛，虽然年后要找实习，但是还是慌不得，慢慢来，一口吃不成个大胖子，准备晚上再补一补 Dubbo 基础\"]},\"6\":{\"c\":[\"自我介绍\",\"专业技能\",\"项目经验\"]},\"7\":{\"h\":\"个人简历\"},\"8\":{\"h\":\"个人信息\",\"t\":[\"姓名\",\"电话\",\"邮箱\",\"毕业时间\",\"工作时间\",\"Github：https://github.com\"]},\"9\":{\"h\":\"毕业院校\",\"t\":[\"时间、院校、专业、学位\",\"荣誉、成绩\"]},\"10\":{\"h\":\"专业技能\",\"t\":[\"熟练掌握 Java 核心知识、JUC、HashMap、斐波那契散列等，具备良好的面向对象编程思想。\",\"熟练掌握 Java 设计模式，如工厂、代理、组合、策略等设计模式，并善用设计原则构建可复用代码。\",\"熟练使用 IDEA、Eclipse、Visual Studio Code、Navicat、PostMan、Git、Maven、SVN 等开发工具。\",\"深入理解 JVM 底层原理，熟悉 JVM 各类垃圾收集器的使用及核心参数的调优，具备一定的 JVM 调优能力。\",\"深入学习 Spring 核心流程模块，如IOC、AOP、依赖倒置等，掌握Spring解决复杂场景所需的分治、抽象和知识（设计模式、设计原则），能从核心原理上解决Spring场景问题。同时，具备基于 Spring 开发 SpringBoot Starter 的技能，减少研发成本，为复杂项目提供通用技术组件。\",\"深入学习 MyBatis 核心流程模块，包括会话、反射、代理、事务和插件，熟练掌握 ORM 框架的设计思想、实现方式和应用价值。并根据需求结合 MyBatis 插件机制，开发企业所需的功能，如数据分页、数据库表路由、监控日志和数据安全等。\",\"深入理解 Spring Boot，Spring Cloud 等微服务框架的设计原理及底层架构，熟悉各种微服务架构设计比如服务注册与发现，服务降级，限流，熔断，服务网关路由设计，服务安全认证架构。\",\"熟悉 Dubbo、Zookeeper 等分布式服务协调与治理等技术。\",\"熟练掌握 MySql，掌握 MySQL 主从同步，读写分离技术以及集群的搭建，具备一定的 SQL 调优能力。\",\"深入理解 Redis 线程模型，熟练掌握 Redis 的核心数据结构的使用场景，熟悉各种缓存高并发的使用场景，比如缓存雪崩，缓存穿透等。\",\"熟练掌握分布式场景中的常见的技术问题及解决，比如分布式锁，分布式事务，分布式 session，分布式任务调度。\",\"熟悉 RabbitMQ、Kafka 等常用的消息中间件进行消息的异步数据处理。\",\"了解分布式搜索引擎 ElasticSearch，并能基于 ELK+Kafka 搭建分布式日志收集系统，以及 x-pack-jdbc 的扩展使用。\",\"熟悉 docker 常用命令，能够实现基于 docker+Jenkins 实现自动化部署\",\"掌握 Linux 常用命令，了解 Nginx 服务器的反向代理、负载均衡、动静分离等。\",\"熟练运用 DDD 四层架构领域驱动设计，构建出易于迭代和维护的工程架构，遵守整洁代码、洋葱架构设计思想。\"]},\"11\":{\"h\":\"工作经历【在校生无】\",\"t\":[\"公司\",\"岗位\",\"时间\",\"职责【可选】\",\"成绩【可选】\"]},\"12\":{\"h\":\"项目经验\"},\"13\":{\"h\":\"1. 营销活动平台 - Lottery 微服务抽奖系统\",\"t\":[\"系统架构：以 DDD 领域驱动设计开发，微服务拆分的分布式系统架构\",\"核心技术：SpringBoot、MyBatis、Dubbo、MQ、MySQL、XDB-Router、ES、ZK\",\"项目描述：抽奖系统是营销平台的重要微服务之一，可以满足 C 端人群的需求，例如拉新、促活、留存等。该系统运用抽象、分治和 DDD 知识，拆解服务边界，凝练领域服务功能。围绕抽奖服务建设领域服务，包括规则引擎、抽奖策略、活动玩法、奖品发放等。这可以满足业务产品快速迭代上线的需求，同时减少研发成本，提高交付效率。\",\"核心职责： \",\"【高级】构建以 DDD 分层结构的处理方式，搭建整个抽奖系统架构。运用设计原则和工厂、代理、模板、组合、策略等设计模式的综合使用，搭建易于维护和迭代的系统工程。\",\"【高级】鉴于系统内有较多的规则策略过滤，包括准入、人群、风控、A/BTest等需求，为适应系统规模可快速开发和使用的方式，搭建了去中心化的量化人群规则引擎组件。通过业务需求对逻辑的扩展和内置引擎执行器的使用，完成自由组合的人群过滤服务。这降低了共性功能重复开发所带来的成本问题，并提高了研发效率。\",\"【高级】根据实际秒杀峰值场景 TPS 5000 ~ 8000 的需求，开发了统一路由组件。该组件不仅可以满足差异化不同字段的分库分表组合，还支持 Redis 库存分片和秒杀滑动库存分块。而且，开发了统一路由 XDB-Router 的 SpringBoot Starter 技术组件。该套组件已经经历了多次大促活动场景的考验，支持横向扩展，可以满足业务规模的快速增长。\",\"【简单】运用模板、策略、工厂三个设计模式，定义抽奖过程标准和实现对应的多类型抽奖的服务模块。\",\"【简单】因活动秒杀的并发场景，将秒杀从最开始的数据库行级锁优化为Redis Key 加锁，又从 Redis Key 的独占锁，优化为滑块锁。优化后整体秒杀有了非常可观的性能提升。\",\"【简单】解耦抽奖流程，把抽奖和发奖用MQ消息串联起来，避免一个流程太长，导致用户一直等待。\"]},\"14\":{\"h\":\"2. 手写 MyBatis\",\"t\":[\"项目架构：Object Relational Mapping\",\"项目描述：MyBatis 是 Java 应用编程开发中，非常常用的技术框架。需要较深入的学习和使用，具备 MyBatis 插件开发能力，解决日常场景问题。才能更好更高效的工作。为此，深度学习了《手写MyBatis：渐进式源码实践》一书，完整实现了一个 MyBatis ORM 框架。技术积累颇深，提高了设计思维和编码能力。\",\"个人收获： \",\"首先学习到为什么日常使用 MyBatis 时，可以仅提供 IDao 接口，就可以关联对应配置的SQL语句，完成数据库操作。这是因为做了代理与映射，封装调用逻辑到 SqlSession 会话功能实现中。\",\"掌握了数10种设计模式的运用，其中感触最大的是 MyBatis 如何管理多边服务的设计。如创建会话模型，统一调度执行器使用和数据的封装，并把这些复杂的操作，通过 SqlSessionFactory 工厂统一对外提供 SqlSession 服务。\",\"彻底了解并掌握了 MyBatis Plugin 设计模型，这个技术可以让我基于 MyBatis 做出日志监控、库表路由、字段加解密等操作。为以后编程工作，提供更多的解决方案。\",\"除此之外，还有一级缓存、二级缓存的装饰器模式使用，MyBatis 开发后与 Spring、SpringBoot 整合的实现，让我对 MyBatis 的全体系开发流程和对应的技术整合，已经非常清晰，便于以后应用和从根上快速排查解决问题，并给出合理的技术方案。\"]},\"15\":{\"h\":\"3. OpenAI 应用服务 - 辅助工作提效工具开发\",\"t\":[\"项目架构：微服务架构设计，OpenAI-SDK 多模型组件【ChatGLM、ChatGPT】、DDD 应用服务API封装、WEB REACT 前端界面【按需编写】\",\"核心技术：SpringBoot、MyBatis、Redis/Guava、OKHttp3、OpenAI 大模型【可对接ChatGLM、腾讯混元等】、React、TypeScript\",\"项目描述：此项目以应用OpenAI技术，对接多种大模型提供生成式服务，为XXX场景提效。项目的架构设计实现以微服务进行拆分，涵盖；OpenAI-SDK、OpenAI-API、公众号鉴权、企业支付【暂时申请中，如果你对接了可以写】等。并以模块化设计，积木式构建应用，让不同的场景诉求都可以配置化对接。\",\"核心职责： \",\"首先这是我们xxx公司/实践/实训的第一个OpenAI项目，后续势必会有更多的场景以不同的方式接入。包括 SDK 独立接入、API 接口接入、MQ 消息接入，以及使用提供好的服务类接入。所以在这部分设计的时候，我采用了微服务的架构设计，按照职责边界进行拆分设计。\",\"采用 DDD 架构 API，以及便于不同领域模块的独立设计，一个领域就是一个功能域。在功能域中提供模型、仓储、事件、服务。这样可以更好扩展。\",\"鉴于生成式服务的文本生成可能会有不可靠信息，所以对这部分内容添加了敏感词的过滤。并可根据不同场景选择不同范围的敏感词处理。\",\"OpenAI 大模型有多种，这部分在架构上设计独立的 SDK，在实现上采用了 Session 会话模型进行处理，以及通过工厂处理服务。在细节对上，采用了 OKHttp3 框架完成模型对接，这样的方式更好扩展，代码也更易于维护。\",\"在整套工程的设计实现中，采用了较多的分治、抽象的思想和设计模式和设计原则知识的运用，来解决各类场景问题。\",\"对接微信扫码支付，完成从商品库、下单支付、异步发货、掉单补偿等核心流程实现。让用户可以在线购买对话额度。\",\"注意：你还可以根据项目中提到的各类技术和章节，来编写你的职责。\"]},\"16\":{\"h\":\"4. 服务治理 SpringBoot 中间件\",\"t\":[\"系统架构：SpringBoot Starter 组件开发\",\"核心技术：熔断、降级、限流、切量、白名单、人群控制\",\"项目描述：该SpringBoot Starter中间件实现了熔断、降级、限流、切量、白名单等服务治理功能，减少了开发工作量和出错风险。利用SpringBoot的自动化配置机制简化了集成和使用，并提供了可扩展接口，以满足不同场景的需求。\",\"核心职责： \",\"鉴于组内同类需求的重复开发，设计并实现服务治理 SpringBoot Starter 中间件，提高开发效率和降低重复开发成本。 该中间件的核心功能包括服务治理中的熔断、降级、限流、切量和白名单等。\",\"通过利用SpringBoot的自动化配置机制，该中间件可以简化集成和使用，同时提供足够的配置选项以满足不同场景的需求。\",\"此外，该中间件还提供了可扩展的接口，方便用户根据自身需求扩展功能，从而更好地满足不同的业务需求。\"]},\"17\":{\"c\":[\"自我介绍\",\"专业技能\",\"项目经验\"]},\"18\":{\"h\":\"代码笔记\"},\"19\":{\"h\":\"任务\",\"t\":[\" 环境配置\",\" 搭建项目结构\",\" 跑通广播模式 RPC 过程调用\"]},\"20\":{\"h\":\"学习过程\",\"t\":[\"项目整体了解\",\"通过对第一节文档的阅读，了解整个项目的生命周期、所需要的技术以及代码提交规范\",\"搭建项目结构，理解每个模块应该干什么\",\"模块\",\"作用\",\"Lottery\",\"总项目，用来管理整个项目的依赖\",\"lottery-application\",\"应用层，为用户接口层提供各种应用数据展现支持服务\",\"lottery-common\",\"定义通用数据，比如统一响应数据、常量、异常、枚举等\",\"lottery-domain\",\"领域层，核心业务逻辑\",\"lottery-infrastructure\",\"基础层，为其他各层提供通用技术能力，包括数据库、Redis、ES 等\",\"lottery-interfaces\",\"用户接口层，存放与前端交互、展现数据相关的代码\",\"lottery-rpc\",\"RPC 接口文件\",\"注：因为并不了解 DDD 架构，所以每个模块目前只有模糊的概念，具体的东西在后续代码编写中进行体会\",\"阅读 210801_xfg_initProject 分支上的 POM 文件\",\"通过对 POM 文件的阅读，更加清楚的了解这个项目所使用的技术，并且通过阅读发现项目没有添加 Lombok 来简化开发，具体项目开发是否使用这个插件我不知道，但是我想用，因为我懒，所以就给加上了😄\",\"跑通 RPC\",\"定义 response 状态码枚举供通用返回对象 Result 进行使用\",\"定义通用返回对象 Result 类\",\"定义 activity 表的持久化对象\",\"定义 activity 表的 Mapper 接口\",\"定义 mybatis 配置文件\",\"定义 activity 表的 mapper.xml 文件\",\"定义 rpc 的数据传输对象(DTO) ActivityDto\",\"定义 rpc 的 请求对象 ActivityReq\",\"定义 rpc 的响应对象 ActivityRes\",\"定义 rpc 接口 IActivityBooth\",\"实现 IActivityBooth 接口\",\"编写启动类\",\"编写配置文件 application.yml\",\"编写测试模块 这个我是直接加在工程里面的，教程是单独开了一个项目\"]},\"21\":{\"h\":\"遇到的问题\",\"t\":[\"代码分层不清晰，不知道每个模块应该干什么事\",\"这个问题该怎么解决呢？我觉得最好的解决办法就是不解决，哈哈哈，因为当初学 MVC 的时候最开始也不清楚为什么要这样分层，为什么就要分 Controller、Service 和 DAO，但是后来经过大量代码的编写，也逐渐熟悉了这样的分层架构，所以现在并不想解决这个问题，具体还是靠后面的代码进行了解和熟悉吧\",\"JSON.toJSonString() 方法返回了空 {}\",\"问题出现原因，忘了加 @Data 注解，导致没有 getter/setter 就导致了这个问题，加上注解即可\",\"解决！\",\"数据库乱码问题\",\"测试模块 RPC 远程调用返回的结果为:\",\"测试结果：{\\\"activity\\\":{\\\"activityDesc\\\":\\\"?????????\\\",\\\"activityId\\\":100002,\\\"activityName\\\":\\\"????\\\",\\\"beginDateTime\\\":1705215282000,\\\"endDateTime\\\":1705215282000,\\\"stockCount\\\":100,\\\"takeCount\\\":10},\\\"result\\\":{\\\"code\\\":\\\"0000\\\",\\\"info\\\":\\\"成功\\\"}}\",\"明显的乱码问题，查看数据库，发现插入的时候就以及乱码了，看了一下配置文件中的数据库连接 url，发现使用了 useUnicode=true，并没有指定字符集，所以添加一下 utf-8 字符集即可，完整 url: jdbc:mysql://127.0.0.1:3306/lottery?useUnicode=true&characterEncoding=UTF-8\",\"再进行一轮测试，测试结果：\",\"测试结果：{\\\"activity\\\":{\\\"activityDesc\\\":\\\"仅用于插入数据测试\\\",\\\"activityId\\\":100003,\\\"activityName\\\":\\\"测试活动\\\",\\\"beginDateTime\\\":1705218054000,\\\"endDateTime\\\":1705218054000,\\\"stockCount\\\":100,\\\"takeCount\\\":10},\\\"result\\\":{\\\"code\\\":\\\"0000\\\",\\\"info\\\":\\\"成功\\\"}}\",\"解决！\"]},\"22\":{\"h\":\"总结\",\"t\":[\"今天干了说明呢？\",\"配置环境\",\"跑通 RPC\",\"具体怎么跑通 RPC 的呢？\",\"在 common 模块创建通用类\",\"在 infrastructure 模块创建 dao 接口以及和数据库相对应的 po 类\",\"在 rpc 模块下创建 RPC 通信接口以及对应的请求和响应的封装类\",\"然后在 interfaces 模块下实现 rpc 模块的接口，在这里调用 Mapper 进行增删改查\",\"然后就写配置呗，SpringBoot 配置、Dubbo 配置、MyBatis 配置\",\"学到了什么呢？\",\"由于之前学习一直使用的是 MVC 架构，并且命名不太规范，所以对于包的命名现在很不适应，比如什么dto、vo啥的各种 o 不太熟悉，这个就不准备纠结了，准备靠代码量进行熟悉\",\"对每个模块有了大概的了解，至少知道了接口写在哪个模块，接口实现类在哪个模块以及 Mapper 写在哪\",\"现在在我眼中，这个 interfaces 模块，就跟以前学的 Dubbo 的服务提供者一样吧？因为这个模块用来实现接口的，所以就会引用其他模块，要调用其他模块的东西就要添加依赖，所以这个模块起起来之后，就带动了所有模块，整个项目也就 run 起来了\",\"第一天，脑子还有点迷糊，因为基础不太牢固，所以有些小 bug 花费了挺长时间的，但是至少是跑起来了吧？也还行，路虽远，行则将至嘛，虽然年后要找实习，但是还是慌不得，慢慢来，一口吃不成个大胖子，准备晚上再补一补 Dubbo 基础\"]},\"23\":{\"c\":[\"自我介绍\",\"专业技能\",\"项目经验\"]},\"24\":{\"h\":\"学习笔记\"},\"25\":{\"h\":\"任务\",\"t\":[\" 环境配置\",\" 搭建项目结构\",\" 跑通广播模式 RPC 过程调用\"]},\"26\":{\"h\":\"学习过程\",\"t\":[\"项目整体了解\",\"通过对第一节文档的阅读，了解整个项目的生命周期、所需要的技术以及代码提交规范\",\"搭建项目结构，理解每个模块应该干什么\",\"模块\",\"作用\",\"Lottery\",\"总项目，用来管理整个项目的依赖\",\"lottery-application\",\"应用层，为用户接口层提供各种应用数据展现支持服务\",\"lottery-common\",\"定义通用数据，比如统一响应数据、常量、异常、枚举等\",\"lottery-domain\",\"领域层，核心业务逻辑\",\"lottery-infrastructure\",\"基础层，为其他各层提供通用技术能力，包括数据库、Redis、ES 等\",\"lottery-interfaces\",\"用户接口层，存放与前端交互、展现数据相关的代码\",\"lottery-rpc\",\"RPC 接口文件\",\"注：因为并不了解 DDD 架构，所以每个模块目前只有模糊的概念，具体的东西在后续代码编写中进行体会\",\"阅读 210801_xfg_initProject 分支上的 POM 文件\",\"通过对 POM 文件的阅读，更加清楚的了解这个项目所使用的技术，并且通过阅读发现项目没有添加 Lombok 来简化开发，具体项目开发是否使用这个插件我不知道，但是我想用，因为我懒，所以就给加上了😄\",\"跑通 RPC\",\"定义 response 状态码枚举供通用返回对象 Result 进行使用\",\"定义通用返回对象 Result 类\",\"定义 activity 表的持久化对象\",\"定义 activity 表的 Mapper 接口\",\"定义 mybatis 配置文件\",\"定义 activity 表的 mapper.xml 文件\",\"定义 rpc 的数据传输对象(DTO) ActivityDto\",\"定义 rpc 的 请求对象 ActivityReq\",\"定义 rpc 的响应对象 ActivityRes\",\"定义 rpc 接口 IActivityBooth\",\"实现 IActivityBooth 接口\",\"编写启动类\",\"编写配置文件 application.yml\",\"编写测试模块 这个我是直接加在工程里面的，教程是单独开了一个项目\"]},\"27\":{\"h\":\"遇到的问题\",\"t\":[\"代码分层不清晰，不知道每个模块应该干什么事\",\"这个问题该怎么解决呢？我觉得最好的解决办法就是不解决，哈哈哈，因为当初学 MVC 的时候最开始也不清楚为什么要这样分层，为什么就要分 Controller、Service 和 DAO，但是后来经过大量代码的编写，也逐渐熟悉了这样的分层架构，所以现在并不想解决这个问题，具体还是靠后面的代码进行了解和熟悉吧\",\"JSON.toJSonString() 方法返回了空 {}\",\"问题出现原因，忘了加 @Data 注解，导致没有 getter/setter 就导致了这个问题，加上注解即可\",\"解决！\",\"数据库乱码问题\",\"测试模块 RPC 远程调用返回的结果为:\",\"测试结果：{\\\"activity\\\":{\\\"activityDesc\\\":\\\"?????????\\\",\\\"activityId\\\":100002,\\\"activityName\\\":\\\"????\\\",\\\"beginDateTime\\\":1705215282000,\\\"endDateTime\\\":1705215282000,\\\"stockCount\\\":100,\\\"takeCount\\\":10},\\\"result\\\":{\\\"code\\\":\\\"0000\\\",\\\"info\\\":\\\"成功\\\"}}\",\"明显的乱码问题，查看数据库，发现插入的时候就以及乱码了，看了一下配置文件中的数据库连接 url，发现使用了 useUnicode=true，并没有指定字符集，所以添加一下 utf-8 字符集即可，完整 url: jdbc:mysql://127.0.0.1:3306/lottery?useUnicode=true&characterEncoding=UTF-8\",\"再进行一轮测试，测试结果：\",\"测试结果：{\\\"activity\\\":{\\\"activityDesc\\\":\\\"仅用于插入数据测试\\\",\\\"activityId\\\":100003,\\\"activityName\\\":\\\"测试活动\\\",\\\"beginDateTime\\\":1705218054000,\\\"endDateTime\\\":1705218054000,\\\"stockCount\\\":100,\\\"takeCount\\\":10},\\\"result\\\":{\\\"code\\\":\\\"0000\\\",\\\"info\\\":\\\"成功\\\"}}\",\"解决！\"]},\"28\":{\"h\":\"总结\",\"t\":[\"今天干了说明呢？\",\"配置环境\",\"跑通 RPC\",\"具体怎么跑通 RPC 的呢？\",\"在 common 模块创建通用类\",\"在 infrastructure 模块创建 dao 接口以及和数据库相对应的 po 类\",\"在 rpc 模块下创建 RPC 通信接口以及对应的请求和响应的封装类\",\"然后在 interfaces 模块下实现 rpc 模块的接口，在这里调用 Mapper 进行增删改查\",\"然后就写配置呗，SpringBoot 配置、Dubbo 配置、MyBatis 配置\",\"学到了什么呢？\",\"由于之前学习一直使用的是 MVC 架构，并且命名不太规范，所以对于包的命名现在很不适应，比如什么dto、vo啥的各种 o 不太熟悉，这个就不准备纠结了，准备靠代码量进行熟悉\",\"对每个模块有了大概的了解，至少知道了接口写在哪个模块，接口实现类在哪个模块以及 Mapper 写在哪\",\"现在在我眼中，这个 interfaces 模块，就跟以前学的 Dubbo 的服务提供者一样吧？因为这个模块用来实现接口的，所以就会引用其他模块，要调用其他模块的东西就要添加依赖，所以这个模块起起来之后，就带动了所有模块，整个项目也就 run 起来了\",\"第一天，脑子还有点迷糊，因为基础不太牢固，所以有些小 bug 花费了挺长时间的，但是至少是跑起来了吧？也还行，路虽远，行则将至嘛，虽然年后要找实习，但是还是慌不得，慢慢来，一口吃不成个大胖子，准备晚上再补一补 Dubbo 基础\"]},\"29\":{\"c\":[\"自我介绍\",\"专业技能\",\"项目经验\"]},\"30\":{\"h\":\"教程手册\"},\"31\":{\"h\":\"任务\",\"t\":[\" 环境配置\",\" 搭建项目结构\",\" 跑通广播模式 RPC 过程调用\"]},\"32\":{\"h\":\"学习过程\",\"t\":[\"项目整体了解\",\"通过对第一节文档的阅读，了解整个项目的生命周期、所需要的技术以及代码提交规范\",\"搭建项目结构，理解每个模块应该干什么\",\"模块\",\"作用\",\"Lottery\",\"总项目，用来管理整个项目的依赖\",\"lottery-application\",\"应用层，为用户接口层提供各种应用数据展现支持服务\",\"lottery-common\",\"定义通用数据，比如统一响应数据、常量、异常、枚举等\",\"lottery-domain\",\"领域层，核心业务逻辑\",\"lottery-infrastructure\",\"基础层，为其他各层提供通用技术能力，包括数据库、Redis、ES 等\",\"lottery-interfaces\",\"用户接口层，存放与前端交互、展现数据相关的代码\",\"lottery-rpc\",\"RPC 接口文件\",\"注：因为并不了解 DDD 架构，所以每个模块目前只有模糊的概念，具体的东西在后续代码编写中进行体会\",\"阅读 210801_xfg_initProject 分支上的 POM 文件\",\"通过对 POM 文件的阅读，更加清楚的了解这个项目所使用的技术，并且通过阅读发现项目没有添加 Lombok 来简化开发，具体项目开发是否使用这个插件我不知道，但是我想用，因为我懒，所以就给加上了😄\",\"跑通 RPC\",\"定义 response 状态码枚举供通用返回对象 Result 进行使用\",\"定义通用返回对象 Result 类\",\"定义 activity 表的持久化对象\",\"定义 activity 表的 Mapper 接口\",\"定义 mybatis 配置文件\",\"定义 activity 表的 mapper.xml 文件\",\"定义 rpc 的数据传输对象(DTO) ActivityDto\",\"定义 rpc 的 请求对象 ActivityReq\",\"定义 rpc 的响应对象 ActivityRes\",\"定义 rpc 接口 IActivityBooth\",\"实现 IActivityBooth 接口\",\"编写启动类\",\"编写配置文件 application.yml\",\"编写测试模块 这个我是直接加在工程里面的，教程是单独开了一个项目\"]},\"33\":{\"h\":\"遇到的问题\",\"t\":[\"代码分层不清晰，不知道每个模块应该干什么事\",\"这个问题该怎么解决呢？我觉得最好的解决办法就是不解决，哈哈哈，因为当初学 MVC 的时候最开始也不清楚为什么要这样分层，为什么就要分 Controller、Service 和 DAO，但是后来经过大量代码的编写，也逐渐熟悉了这样的分层架构，所以现在并不想解决这个问题，具体还是靠后面的代码进行了解和熟悉吧\",\"JSON.toJSonString() 方法返回了空 {}\",\"问题出现原因，忘了加 @Data 注解，导致没有 getter/setter 就导致了这个问题，加上注解即可\",\"解决！\",\"数据库乱码问题\",\"测试模块 RPC 远程调用返回的结果为:\",\"测试结果：{\\\"activity\\\":{\\\"activityDesc\\\":\\\"?????????\\\",\\\"activityId\\\":100002,\\\"activityName\\\":\\\"????\\\",\\\"beginDateTime\\\":1705215282000,\\\"endDateTime\\\":1705215282000,\\\"stockCount\\\":100,\\\"takeCount\\\":10},\\\"result\\\":{\\\"code\\\":\\\"0000\\\",\\\"info\\\":\\\"成功\\\"}}\",\"明显的乱码问题，查看数据库，发现插入的时候就以及乱码了，看了一下配置文件中的数据库连接 url，发现使用了 useUnicode=true，并没有指定字符集，所以添加一下 utf-8 字符集即可，完整 url: jdbc:mysql://127.0.0.1:3306/lottery?useUnicode=true&characterEncoding=UTF-8\",\"再进行一轮测试，测试结果：\",\"测试结果：{\\\"activity\\\":{\\\"activityDesc\\\":\\\"仅用于插入数据测试\\\",\\\"activityId\\\":100003,\\\"activityName\\\":\\\"测试活动\\\",\\\"beginDateTime\\\":1705218054000,\\\"endDateTime\\\":1705218054000,\\\"stockCount\\\":100,\\\"takeCount\\\":10},\\\"result\\\":{\\\"code\\\":\\\"0000\\\",\\\"info\\\":\\\"成功\\\"}}\",\"解决！\"]},\"34\":{\"h\":\"总结\",\"t\":[\"今天干了说明呢？\",\"配置环境\",\"跑通 RPC\",\"具体怎么跑通 RPC 的呢？\",\"在 common 模块创建通用类\",\"在 infrastructure 模块创建 dao 接口以及和数据库相对应的 po 类\",\"在 rpc 模块下创建 RPC 通信接口以及对应的请求和响应的封装类\",\"然后在 interfaces 模块下实现 rpc 模块的接口，在这里调用 Mapper 进行增删改查\",\"然后就写配置呗，SpringBoot 配置、Dubbo 配置、MyBatis 配置\",\"学到了什么呢？\",\"由于之前学习一直使用的是 MVC 架构，并且命名不太规范，所以对于包的命名现在很不适应，比如什么dto、vo啥的各种 o 不太熟悉，这个就不准备纠结了，准备靠代码量进行熟悉\",\"对每个模块有了大概的了解，至少知道了接口写在哪个模块，接口实现类在哪个模块以及 Mapper 写在哪\",\"现在在我眼中，这个 interfaces 模块，就跟以前学的 Dubbo 的服务提供者一样吧？因为这个模块用来实现接口的，所以就会引用其他模块，要调用其他模块的东西就要添加依赖，所以这个模块起起来之后，就带动了所有模块，整个项目也就 run 起来了\",\"第一天，脑子还有点迷糊，因为基础不太牢固，所以有些小 bug 花费了挺长时间的，但是至少是跑起来了吧？也还行，路虽远，行则将至嘛，虽然年后要找实习，但是还是慌不得，慢慢来，一口吃不成个大胖子，准备晚上再补一补 Dubbo 基础\"]},\"35\":{\"c\":[\"自我介绍\",\"专业技能\",\"项目经验\"]},\"36\":{\"h\":\"项目库\"},\"37\":{\"h\":\"任务\",\"t\":[\" 环境配置\",\" 搭建项目结构\",\" 跑通广播模式 RPC 过程调用\"]},\"38\":{\"h\":\"学习过程\",\"t\":[\"项目整体了解\",\"通过对第一节文档的阅读，了解整个项目的生命周期、所需要的技术以及代码提交规范\",\"搭建项目结构，理解每个模块应该干什么\",\"模块\",\"作用\",\"Lottery\",\"总项目，用来管理整个项目的依赖\",\"lottery-application\",\"应用层，为用户接口层提供各种应用数据展现支持服务\",\"lottery-common\",\"定义通用数据，比如统一响应数据、常量、异常、枚举等\",\"lottery-domain\",\"领域层，核心业务逻辑\",\"lottery-infrastructure\",\"基础层，为其他各层提供通用技术能力，包括数据库、Redis、ES 等\",\"lottery-interfaces\",\"用户接口层，存放与前端交互、展现数据相关的代码\",\"lottery-rpc\",\"RPC 接口文件\",\"注：因为并不了解 DDD 架构，所以每个模块目前只有模糊的概念，具体的东西在后续代码编写中进行体会\",\"阅读 210801_xfg_initProject 分支上的 POM 文件\",\"通过对 POM 文件的阅读，更加清楚的了解这个项目所使用的技术，并且通过阅读发现项目没有添加 Lombok 来简化开发，具体项目开发是否使用这个插件我不知道，但是我想用，因为我懒，所以就给加上了😄\",\"跑通 RPC\",\"定义 response 状态码枚举供通用返回对象 Result 进行使用\",\"定义通用返回对象 Result 类\",\"定义 activity 表的持久化对象\",\"定义 activity 表的 Mapper 接口\",\"定义 mybatis 配置文件\",\"定义 activity 表的 mapper.xml 文件\",\"定义 rpc 的数据传输对象(DTO) ActivityDto\",\"定义 rpc 的 请求对象 ActivityReq\",\"定义 rpc 的响应对象 ActivityRes\",\"定义 rpc 接口 IActivityBooth\",\"实现 IActivityBooth 接口\",\"编写启动类\",\"编写配置文件 application.yml\",\"编写测试模块 这个我是直接加在工程里面的，教程是单独开了一个项目\"]},\"39\":{\"h\":\"遇到的问题\",\"t\":[\"代码分层不清晰，不知道每个模块应该干什么事\",\"这个问题该怎么解决呢？我觉得最好的解决办法就是不解决，哈哈哈，因为当初学 MVC 的时候最开始也不清楚为什么要这样分层，为什么就要分 Controller、Service 和 DAO，但是后来经过大量代码的编写，也逐渐熟悉了这样的分层架构，所以现在并不想解决这个问题，具体还是靠后面的代码进行了解和熟悉吧\",\"JSON.toJSonString() 方法返回了空 {}\",\"问题出现原因，忘了加 @Data 注解，导致没有 getter/setter 就导致了这个问题，加上注解即可\",\"解决！\",\"数据库乱码问题\",\"测试模块 RPC 远程调用返回的结果为:\",\"测试结果：{\\\"activity\\\":{\\\"activityDesc\\\":\\\"?????????\\\",\\\"activityId\\\":100002,\\\"activityName\\\":\\\"????\\\",\\\"beginDateTime\\\":1705215282000,\\\"endDateTime\\\":1705215282000,\\\"stockCount\\\":100,\\\"takeCount\\\":10},\\\"result\\\":{\\\"code\\\":\\\"0000\\\",\\\"info\\\":\\\"成功\\\"}}\",\"明显的乱码问题，查看数据库，发现插入的时候就以及乱码了，看了一下配置文件中的数据库连接 url，发现使用了 useUnicode=true，并没有指定字符集，所以添加一下 utf-8 字符集即可，完整 url: jdbc:mysql://127.0.0.1:3306/lottery?useUnicode=true&characterEncoding=UTF-8\",\"再进行一轮测试，测试结果：\",\"测试结果：{\\\"activity\\\":{\\\"activityDesc\\\":\\\"仅用于插入数据测试\\\",\\\"activityId\\\":100003,\\\"activityName\\\":\\\"测试活动\\\",\\\"beginDateTime\\\":1705218054000,\\\"endDateTime\\\":1705218054000,\\\"stockCount\\\":100,\\\"takeCount\\\":10},\\\"result\\\":{\\\"code\\\":\\\"0000\\\",\\\"info\\\":\\\"成功\\\"}}\",\"解决！\"]},\"40\":{\"h\":\"总结\",\"t\":[\"今天干了说明呢？\",\"配置环境\",\"跑通 RPC\",\"具体怎么跑通 RPC 的呢？\",\"在 common 模块创建通用类\",\"在 infrastructure 模块创建 dao 接口以及和数据库相对应的 po 类\",\"在 rpc 模块下创建 RPC 通信接口以及对应的请求和响应的封装类\",\"然后在 interfaces 模块下实现 rpc 模块的接口，在这里调用 Mapper 进行增删改查\",\"然后就写配置呗，SpringBoot 配置、Dubbo 配置、MyBatis 配置\",\"学到了什么呢？\",\"由于之前学习一直使用的是 MVC 架构，并且命名不太规范，所以对于包的命名现在很不适应，比如什么dto、vo啥的各种 o 不太熟悉，这个就不准备纠结了，准备靠代码量进行熟悉\",\"对每个模块有了大概的了解，至少知道了接口写在哪个模块，接口实现类在哪个模块以及 Mapper 写在哪\",\"现在在我眼中，这个 interfaces 模块，就跟以前学的 Dubbo 的服务提供者一样吧？因为这个模块用来实现接口的，所以就会引用其他模块，要调用其他模块的东西就要添加依赖，所以这个模块起起来之后，就带动了所有模块，整个项目也就 run 起来了\",\"第一天，脑子还有点迷糊，因为基础不太牢固，所以有些小 bug 花费了挺长时间的，但是至少是跑起来了吧？也还行，路虽远，行则将至嘛，虽然年后要找实习，但是还是慌不得，慢慢来，一口吃不成个大胖子，准备晚上再补一补 Dubbo 基础\"]},\"41\":{\"c\":[\"自我介绍\",\"专业技能\",\"项目经验\"]},\"42\":{\"h\":\"Java\"},\"43\":{\"h\":\"任务\",\"t\":[\" 环境配置\",\" 搭建项目结构\",\" 跑通广播模式 RPC 过程调用\"]},\"44\":{\"h\":\"学习过程\",\"t\":[\"项目整体了解\",\"通过对第一节文档的阅读，了解整个项目的生命周期、所需要的技术以及代码提交规范\",\"搭建项目结构，理解每个模块应该干什么\",\"模块\",\"作用\",\"Lottery\",\"总项目，用来管理整个项目的依赖\",\"lottery-application\",\"应用层，为用户接口层提供各种应用数据展现支持服务\",\"lottery-common\",\"定义通用数据，比如统一响应数据、常量、异常、枚举等\",\"lottery-domain\",\"领域层，核心业务逻辑\",\"lottery-infrastructure\",\"基础层，为其他各层提供通用技术能力，包括数据库、Redis、ES 等\",\"lottery-interfaces\",\"用户接口层，存放与前端交互、展现数据相关的代码\",\"lottery-rpc\",\"RPC 接口文件\",\"注：因为并不了解 DDD 架构，所以每个模块目前只有模糊的概念，具体的东西在后续代码编写中进行体会\",\"阅读 210801_xfg_initProject 分支上的 POM 文件\",\"通过对 POM 文件的阅读，更加清楚的了解这个项目所使用的技术，并且通过阅读发现项目没有添加 Lombok 来简化开发，具体项目开发是否使用这个插件我不知道，但是我想用，因为我懒，所以就给加上了😄\",\"跑通 RPC\",\"定义 response 状态码枚举供通用返回对象 Result 进行使用\",\"定义通用返回对象 Result 类\",\"定义 activity 表的持久化对象\",\"定义 activity 表的 Mapper 接口\",\"定义 mybatis 配置文件\",\"定义 activity 表的 mapper.xml 文件\",\"定义 rpc 的数据传输对象(DTO) ActivityDto\",\"定义 rpc 的 请求对象 ActivityReq\",\"定义 rpc 的响应对象 ActivityRes\",\"定义 rpc 接口 IActivityBooth\",\"实现 IActivityBooth 接口\",\"编写启动类\",\"编写配置文件 application.yml\",\"编写测试模块 这个我是直接加在工程里面的，教程是单独开了一个项目\"]},\"45\":{\"h\":\"遇到的问题\",\"t\":[\"代码分层不清晰，不知道每个模块应该干什么事\",\"这个问题该怎么解决呢？我觉得最好的解决办法就是不解决，哈哈哈，因为当初学 MVC 的时候最开始也不清楚为什么要这样分层，为什么就要分 Controller、Service 和 DAO，但是后来经过大量代码的编写，也逐渐熟悉了这样的分层架构，所以现在并不想解决这个问题，具体还是靠后面的代码进行了解和熟悉吧\",\"JSON.toJSonString() 方法返回了空 {}\",\"问题出现原因，忘了加 @Data 注解，导致没有 getter/setter 就导致了这个问题，加上注解即可\",\"解决！\",\"数据库乱码问题\",\"测试模块 RPC 远程调用返回的结果为:\",\"测试结果：{\\\"activity\\\":{\\\"activityDesc\\\":\\\"?????????\\\",\\\"activityId\\\":100002,\\\"activityName\\\":\\\"????\\\",\\\"beginDateTime\\\":1705215282000,\\\"endDateTime\\\":1705215282000,\\\"stockCount\\\":100,\\\"takeCount\\\":10},\\\"result\\\":{\\\"code\\\":\\\"0000\\\",\\\"info\\\":\\\"成功\\\"}}\",\"明显的乱码问题，查看数据库，发现插入的时候就以及乱码了，看了一下配置文件中的数据库连接 url，发现使用了 useUnicode=true，并没有指定字符集，所以添加一下 utf-8 字符集即可，完整 url: jdbc:mysql://127.0.0.1:3306/lottery?useUnicode=true&characterEncoding=UTF-8\",\"再进行一轮测试，测试结果：\",\"测试结果：{\\\"activity\\\":{\\\"activityDesc\\\":\\\"仅用于插入数据测试\\\",\\\"activityId\\\":100003,\\\"activityName\\\":\\\"测试活动\\\",\\\"beginDateTime\\\":1705218054000,\\\"endDateTime\\\":1705218054000,\\\"stockCount\\\":100,\\\"takeCount\\\":10},\\\"result\\\":{\\\"code\\\":\\\"0000\\\",\\\"info\\\":\\\"成功\\\"}}\",\"解决！\"]},\"46\":{\"h\":\"总结\",\"t\":[\"今天干了说明呢？\",\"配置环境\",\"跑通 RPC\",\"具体怎么跑通 RPC 的呢？\",\"在 common 模块创建通用类\",\"在 infrastructure 模块创建 dao 接口以及和数据库相对应的 po 类\",\"在 rpc 模块下创建 RPC 通信接口以及对应的请求和响应的封装类\",\"然后在 interfaces 模块下实现 rpc 模块的接口，在这里调用 Mapper 进行增删改查\",\"然后就写配置呗，SpringBoot 配置、Dubbo 配置、MyBatis 配置\",\"学到了什么呢？\",\"由于之前学习一直使用的是 MVC 架构，并且命名不太规范，所以对于包的命名现在很不适应，比如什么dto、vo啥的各种 o 不太熟悉，这个就不准备纠结了，准备靠代码量进行熟悉\",\"对每个模块有了大概的了解，至少知道了接口写在哪个模块，接口实现类在哪个模块以及 Mapper 写在哪\",\"现在在我眼中，这个 interfaces 模块，就跟以前学的 Dubbo 的服务提供者一样吧？因为这个模块用来实现接口的，所以就会引用其他模块，要调用其他模块的东西就要添加依赖，所以这个模块起起来之后，就带动了所有模块，整个项目也就 run 起来了\",\"第一天，脑子还有点迷糊，因为基础不太牢固，所以有些小 bug 花费了挺长时间的，但是至少是跑起来了吧？也还行，路虽远，行则将至嘛，虽然年后要找实习，但是还是慌不得，慢慢来，一口吃不成个大胖子，准备晚上再补一补 Dubbo 基础\"]},\"47\":{\"c\":[\"自我介绍\",\"专业技能\",\"项目经验\"]},\"48\":{\"h\":\"git教程\"},\"49\":{\"h\":\"任务\",\"t\":[\" 环境配置\",\" 搭建项目结构\",\" 跑通广播模式 RPC 过程调用\"]},\"50\":{\"h\":\"学习过程\",\"t\":[\"项目整体了解\",\"通过对第一节文档的阅读，了解整个项目的生命周期、所需要的技术以及代码提交规范\",\"搭建项目结构，理解每个模块应该干什么\",\"模块\",\"作用\",\"Lottery\",\"总项目，用来管理整个项目的依赖\",\"lottery-application\",\"应用层，为用户接口层提供各种应用数据展现支持服务\",\"lottery-common\",\"定义通用数据，比如统一响应数据、常量、异常、枚举等\",\"lottery-domain\",\"领域层，核心业务逻辑\",\"lottery-infrastructure\",\"基础层，为其他各层提供通用技术能力，包括数据库、Redis、ES 等\",\"lottery-interfaces\",\"用户接口层，存放与前端交互、展现数据相关的代码\",\"lottery-rpc\",\"RPC 接口文件\",\"注：因为并不了解 DDD 架构，所以每个模块目前只有模糊的概念，具体的东西在后续代码编写中进行体会\",\"阅读 210801_xfg_initProject 分支上的 POM 文件\",\"通过对 POM 文件的阅读，更加清楚的了解这个项目所使用的技术，并且通过阅读发现项目没有添加 Lombok 来简化开发，具体项目开发是否使用这个插件我不知道，但是我想用，因为我懒，所以就给加上了😄\",\"跑通 RPC\",\"定义 response 状态码枚举供通用返回对象 Result 进行使用\",\"定义通用返回对象 Result 类\",\"定义 activity 表的持久化对象\",\"定义 activity 表的 Mapper 接口\",\"定义 mybatis 配置文件\",\"定义 activity 表的 mapper.xml 文件\",\"定义 rpc 的数据传输对象(DTO) ActivityDto\",\"定义 rpc 的 请求对象 ActivityReq\",\"定义 rpc 的响应对象 ActivityRes\",\"定义 rpc 接口 IActivityBooth\",\"实现 IActivityBooth 接口\",\"编写启动类\",\"编写配置文件 application.yml\",\"编写测试模块 这个我是直接加在工程里面的，教程是单独开了一个项目\"]},\"51\":{\"h\":\"遇到的问题\",\"t\":[\"代码分层不清晰，不知道每个模块应该干什么事\",\"这个问题该怎么解决呢？我觉得最好的解决办法就是不解决，哈哈哈，因为当初学 MVC 的时候最开始也不清楚为什么要这样分层，为什么就要分 Controller、Service 和 DAO，但是后来经过大量代码的编写，也逐渐熟悉了这样的分层架构，所以现在并不想解决这个问题，具体还是靠后面的代码进行了解和熟悉吧\",\"JSON.toJSonString() 方法返回了空 {}\",\"问题出现原因，忘了加 @Data 注解，导致没有 getter/setter 就导致了这个问题，加上注解即可\",\"解决！\",\"数据库乱码问题\",\"测试模块 RPC 远程调用返回的结果为:\",\"测试结果：{\\\"activity\\\":{\\\"activityDesc\\\":\\\"?????????\\\",\\\"activityId\\\":100002,\\\"activityName\\\":\\\"????\\\",\\\"beginDateTime\\\":1705215282000,\\\"endDateTime\\\":1705215282000,\\\"stockCount\\\":100,\\\"takeCount\\\":10},\\\"result\\\":{\\\"code\\\":\\\"0000\\\",\\\"info\\\":\\\"成功\\\"}}\",\"明显的乱码问题，查看数据库，发现插入的时候就以及乱码了，看了一下配置文件中的数据库连接 url，发现使用了 useUnicode=true，并没有指定字符集，所以添加一下 utf-8 字符集即可，完整 url: jdbc:mysql://127.0.0.1:3306/lottery?useUnicode=true&characterEncoding=UTF-8\",\"再进行一轮测试，测试结果：\",\"测试结果：{\\\"activity\\\":{\\\"activityDesc\\\":\\\"仅用于插入数据测试\\\",\\\"activityId\\\":100003,\\\"activityName\\\":\\\"测试活动\\\",\\\"beginDateTime\\\":1705218054000,\\\"endDateTime\\\":1705218054000,\\\"stockCount\\\":100,\\\"takeCount\\\":10},\\\"result\\\":{\\\"code\\\":\\\"0000\\\",\\\"info\\\":\\\"成功\\\"}}\",\"解决！\"]},\"52\":{\"h\":\"总结\",\"t\":[\"今天干了说明呢？\",\"配置环境\",\"跑通 RPC\",\"具体怎么跑通 RPC 的呢？\",\"在 common 模块创建通用类\",\"在 infrastructure 模块创建 dao 接口以及和数据库相对应的 po 类\",\"在 rpc 模块下创建 RPC 通信接口以及对应的请求和响应的封装类\",\"然后在 interfaces 模块下实现 rpc 模块的接口，在这里调用 Mapper 进行增删改查\",\"然后就写配置呗，SpringBoot 配置、Dubbo 配置、MyBatis 配置\",\"学到了什么呢？\",\"由于之前学习一直使用的是 MVC 架构，并且命名不太规范，所以对于包的命名现在很不适应，比如什么dto、vo啥的各种 o 不太熟悉，这个就不准备纠结了，准备靠代码量进行熟悉\",\"对每个模块有了大概的了解，至少知道了接口写在哪个模块，接口实现类在哪个模块以及 Mapper 写在哪\",\"现在在我眼中，这个 interfaces 模块，就跟以前学的 Dubbo 的服务提供者一样吧？因为这个模块用来实现接口的，所以就会引用其他模块，要调用其他模块的东西就要添加依赖，所以这个模块起起来之后，就带动了所有模块，整个项目也就 run 起来了\",\"第一天，脑子还有点迷糊，因为基础不太牢固，所以有些小 bug 花费了挺长时间的，但是至少是跑起来了吧？也还行，路虽远，行则将至嘛，虽然年后要找实习，但是还是慌不得，慢慢来，一口吃不成个大胖子，准备晚上再补一补 Dubbo 基础\"]},\"53\":{\"c\":[\"自我介绍\",\"专业技能\",\"项目经验\"]},\"54\":{\"h\":\"大营销抽奖\"},\"55\":{\"h\":\"任务\",\"t\":[\" 环境配置\",\" 搭建项目结构\",\" 跑通广播模式 RPC 过程调用\"]},\"56\":{\"h\":\"学习过程\",\"t\":[\"项目整体了解\",\"通过对第一节文档的阅读，了解整个项目的生命周期、所需要的技术以及代码提交规范\",\"搭建项目结构，理解每个模块应该干什么\",\"模块\",\"作用\",\"Lottery\",\"总项目，用来管理整个项目的依赖\",\"lottery-application\",\"应用层，为用户接口层提供各种应用数据展现支持服务\",\"lottery-common\",\"定义通用数据，比如统一响应数据、常量、异常、枚举等\",\"lottery-domain\",\"领域层，核心业务逻辑\",\"lottery-infrastructure\",\"基础层，为其他各层提供通用技术能力，包括数据库、Redis、ES 等\",\"lottery-interfaces\",\"用户接口层，存放与前端交互、展现数据相关的代码\",\"lottery-rpc\",\"RPC 接口文件\",\"注：因为并不了解 DDD 架构，所以每个模块目前只有模糊的概念，具体的东西在后续代码编写中进行体会\",\"阅读 210801_xfg_initProject 分支上的 POM 文件\",\"通过对 POM 文件的阅读，更加清楚的了解这个项目所使用的技术，并且通过阅读发现项目没有添加 Lombok 来简化开发，具体项目开发是否使用这个插件我不知道，但是我想用，因为我懒，所以就给加上了😄\",\"跑通 RPC\",\"定义 response 状态码枚举供通用返回对象 Result 进行使用\",\"定义通用返回对象 Result 类\",\"定义 activity 表的持久化对象\",\"定义 activity 表的 Mapper 接口\",\"定义 mybatis 配置文件\",\"定义 activity 表的 mapper.xml 文件\",\"定义 rpc 的数据传输对象(DTO) ActivityDto\",\"定义 rpc 的 请求对象 ActivityReq\",\"定义 rpc 的响应对象 ActivityRes\",\"定义 rpc 接口 IActivityBooth\",\"实现 IActivityBooth 接口\",\"编写启动类\",\"编写配置文件 application.yml\",\"编写测试模块 这个我是直接加在工程里面的，教程是单独开了一个项目\"]},\"57\":{\"h\":\"遇到的问题\",\"t\":[\"代码分层不清晰，不知道每个模块应该干什么事\",\"这个问题该怎么解决呢？我觉得最好的解决办法就是不解决，哈哈哈，因为当初学 MVC 的时候最开始也不清楚为什么要这样分层，为什么就要分 Controller、Service 和 DAO，但是后来经过大量代码的编写，也逐渐熟悉了这样的分层架构，所以现在并不想解决这个问题，具体还是靠后面的代码进行了解和熟悉吧\",\"JSON.toJSonString() 方法返回了空 {}\",\"问题出现原因，忘了加 @Data 注解，导致没有 getter/setter 就导致了这个问题，加上注解即可\",\"解决！\",\"数据库乱码问题\",\"测试模块 RPC 远程调用返回的结果为:\",\"测试结果：{\\\"activity\\\":{\\\"activityDesc\\\":\\\"?????????\\\",\\\"activityId\\\":100002,\\\"activityName\\\":\\\"????\\\",\\\"beginDateTime\\\":1705215282000,\\\"endDateTime\\\":1705215282000,\\\"stockCount\\\":100,\\\"takeCount\\\":10},\\\"result\\\":{\\\"code\\\":\\\"0000\\\",\\\"info\\\":\\\"成功\\\"}}\",\"明显的乱码问题，查看数据库，发现插入的时候就以及乱码了，看了一下配置文件中的数据库连接 url，发现使用了 useUnicode=true，并没有指定字符集，所以添加一下 utf-8 字符集即可，完整 url: jdbc:mysql://127.0.0.1:3306/lottery?useUnicode=true&characterEncoding=UTF-8\",\"再进行一轮测试，测试结果：\",\"测试结果：{\\\"activity\\\":{\\\"activityDesc\\\":\\\"仅用于插入数据测试\\\",\\\"activityId\\\":100003,\\\"activityName\\\":\\\"测试活动\\\",\\\"beginDateTime\\\":1705218054000,\\\"endDateTime\\\":1705218054000,\\\"stockCount\\\":100,\\\"takeCount\\\":10},\\\"result\\\":{\\\"code\\\":\\\"0000\\\",\\\"info\\\":\\\"成功\\\"}}\",\"解决！\"]},\"58\":{\"h\":\"总结\",\"t\":[\"今天干了说明呢？\",\"配置环境\",\"跑通 RPC\",\"具体怎么跑通 RPC 的呢？\",\"在 common 模块创建通用类\",\"在 infrastructure 模块创建 dao 接口以及和数据库相对应的 po 类\",\"在 rpc 模块下创建 RPC 通信接口以及对应的请求和响应的封装类\",\"然后在 interfaces 模块下实现 rpc 模块的接口，在这里调用 Mapper 进行增删改查\",\"然后就写配置呗，SpringBoot 配置、Dubbo 配置、MyBatis 配置\",\"学到了什么呢？\",\"由于之前学习一直使用的是 MVC 架构，并且命名不太规范，所以对于包的命名现在很不适应，比如什么dto、vo啥的各种 o 不太熟悉，这个就不准备纠结了，准备靠代码量进行熟悉\",\"对每个模块有了大概的了解，至少知道了接口写在哪个模块，接口实现类在哪个模块以及 Mapper 写在哪\",\"现在在我眼中，这个 interfaces 模块，就跟以前学的 Dubbo 的服务提供者一样吧？因为这个模块用来实现接口的，所以就会引用其他模块，要调用其他模块的东西就要添加依赖，所以这个模块起起来之后，就带动了所有模块，整个项目也就 run 起来了\",\"第一天，脑子还有点迷糊，因为基础不太牢固，所以有些小 bug 花费了挺长时间的，但是至少是跑起来了吧？也还行，路虽远，行则将至嘛，虽然年后要找实习，但是还是慌不得，慢慢来，一口吃不成个大胖子，准备晚上再补一补 Dubbo 基础\"]},\"59\":{\"c\":[\"自我介绍\",\"专业技能\",\"项目经验\"]},\"60\":{\"h\":\"Day1\"},\"61\":{\"h\":\"任务\",\"t\":[\" 环境配置\",\" 搭建项目结构\",\" 跑通广播模式 RPC 过程调用\"]},\"62\":{\"h\":\"学习过程\",\"t\":[\"项目整体了解\",\"通过对第一节文档的阅读，了解整个项目的生命周期、所需要的技术以及代码提交规范\",\"搭建项目结构，理解每个模块应该干什么\",\"模块\",\"作用\",\"Lottery\",\"总项目，用来管理整个项目的依赖\",\"lottery-application\",\"应用层，为用户接口层提供各种应用数据展现支持服务\",\"lottery-common\",\"定义通用数据，比如统一响应数据、常量、异常、枚举等\",\"lottery-domain\",\"领域层，核心业务逻辑\",\"lottery-infrastructure\",\"基础层，为其他各层提供通用技术能力，包括数据库、Redis、ES 等\",\"lottery-interfaces\",\"用户接口层，存放与前端交互、展现数据相关的代码\",\"lottery-rpc\",\"RPC 接口文件\",\"注：因为并不了解 DDD 架构，所以每个模块目前只有模糊的概念，具体的东西在后续代码编写中进行体会\",\"阅读 210801_xfg_initProject 分支上的 POM 文件\",\"通过对 POM 文件的阅读，更加清楚的了解这个项目所使用的技术，并且通过阅读发现项目没有添加 Lombok 来简化开发，具体项目开发是否使用这个插件我不知道，但是我想用，因为我懒，所以就给加上了😄\",\"跑通 RPC\",\"定义 response 状态码枚举供通用返回对象 Result 进行使用\",\"定义通用返回对象 Result 类\",\"定义 activity 表的持久化对象\",\"定义 activity 表的 Mapper 接口\",\"定义 mybatis 配置文件\",\"定义 activity 表的 mapper.xml 文件\",\"定义 rpc 的数据传输对象(DTO) ActivityDto\",\"定义 rpc 的 请求对象 ActivityReq\",\"定义 rpc 的响应对象 ActivityRes\",\"定义 rpc 接口 IActivityBooth\",\"实现 IActivityBooth 接口\",\"编写启动类\",\"编写配置文件 application.yml\",\"编写测试模块 这个我是直接加在工程里面的，教程是单独开了一个项目\"]},\"63\":{\"h\":\"遇到的问题\",\"t\":[\"代码分层不清晰，不知道每个模块应该干什么事\",\"这个问题该怎么解决呢？我觉得最好的解决办法就是不解决，哈哈哈，因为当初学 MVC 的时候最开始也不清楚为什么要这样分层，为什么就要分 Controller、Service 和 DAO，但是后来经过大量代码的编写，也逐渐熟悉了这样的分层架构，所以现在并不想解决这个问题，具体还是靠后面的代码进行了解和熟悉吧\",\"JSON.toJSonString() 方法返回了空 {}\",\"问题出现原因，忘了加 @Data 注解，导致没有 getter/setter 就导致了这个问题，加上注解即可\",\"解决！\",\"数据库乱码问题\",\"测试模块 RPC 远程调用返回的结果为:\",\"测试结果：{\\\"activity\\\":{\\\"activityDesc\\\":\\\"?????????\\\",\\\"activityId\\\":100002,\\\"activityName\\\":\\\"????\\\",\\\"beginDateTime\\\":1705215282000,\\\"endDateTime\\\":1705215282000,\\\"stockCount\\\":100,\\\"takeCount\\\":10},\\\"result\\\":{\\\"code\\\":\\\"0000\\\",\\\"info\\\":\\\"成功\\\"}}\",\"明显的乱码问题，查看数据库，发现插入的时候就以及乱码了，看了一下配置文件中的数据库连接 url，发现使用了 useUnicode=true，并没有指定字符集，所以添加一下 utf-8 字符集即可，完整 url: jdbc:mysql://127.0.0.1:3306/lottery?useUnicode=true&characterEncoding=UTF-8\",\"再进行一轮测试，测试结果：\",\"测试结果：{\\\"activity\\\":{\\\"activityDesc\\\":\\\"仅用于插入数据测试\\\",\\\"activityId\\\":100003,\\\"activityName\\\":\\\"测试活动\\\",\\\"beginDateTime\\\":1705218054000,\\\"endDateTime\\\":1705218054000,\\\"stockCount\\\":100,\\\"takeCount\\\":10},\\\"result\\\":{\\\"code\\\":\\\"0000\\\",\\\"info\\\":\\\"成功\\\"}}\",\"解决！\"]},\"64\":{\"h\":\"总结\",\"t\":[\"今天干了说明呢？\",\"配置环境\",\"跑通 RPC\",\"具体怎么跑通 RPC 的呢？\",\"在 common 模块创建通用类\",\"在 infrastructure 模块创建 dao 接口以及和数据库相对应的 po 类\",\"在 rpc 模块下创建 RPC 通信接口以及对应的请求和响应的封装类\",\"然后在 interfaces 模块下实现 rpc 模块的接口，在这里调用 Mapper 进行增删改查\",\"然后就写配置呗，SpringBoot 配置、Dubbo 配置、MyBatis 配置\",\"学到了什么呢？\",\"由于之前学习一直使用的是 MVC 架构，并且命名不太规范，所以对于包的命名现在很不适应，比如什么dto、vo啥的各种 o 不太熟悉，这个就不准备纠结了，准备靠代码量进行熟悉\",\"对每个模块有了大概的了解，至少知道了接口写在哪个模块，接口实现类在哪个模块以及 Mapper 写在哪\",\"现在在我眼中，这个 interfaces 模块，就跟以前学的 Dubbo 的服务提供者一样吧？因为这个模块用来实现接口的，所以就会引用其他模块，要调用其他模块的东西就要添加依赖，所以这个模块起起来之后，就带动了所有模块，整个项目也就 run 起来了\",\"第一天，脑子还有点迷糊，因为基础不太牢固，所以有些小 bug 花费了挺长时间的，但是至少是跑起来了吧？也还行，路虽远，行则将至嘛，虽然年后要找实习，但是还是慌不得，慢慢来，一口吃不成个大胖子，准备晚上再补一补 Dubbo 基础获就在于学到了在开发的过程中要把整个流程切分一下，分成一块一块的，然后用 MQ 进行后续的操作，用户不需要感知到这一切，他只需要点进去，然后执行一个小的片段，然后剩下的操作可以使用 MQ 来慢慢操作，而不是之前那样直接单线程一个流程写完，又臭又长，返回得还慢，用户体验很不好，学到了流程切片，今天不亏，哈哈哈哈，这个东西还是很有用的\"]},\"65\":{\"c\":[\"开发笔记\",\"学习记录\"]},\"66\":{\"h\":\"JUC\"},\"67\":{\"h\":\"任务\",\"t\":[\" 环境配置\",\" 搭建项目结构\",\" 跑通广播模式 RPC 过程调用\"]},\"68\":{\"h\":\"学习过程\",\"t\":[\"项目整体了解\",\"通过对第一节文档的阅读，了解整个项目的生命周期、所需要的技术以及代码提交规范\",\"搭建项目结构，理解每个模块应该干什么\",\"模块\",\"作用\",\"Lottery\",\"总项目，用来管理整个项目的依赖\",\"lottery-application\",\"应用层，为用户接口层提供各种应用数据展现支持服务\",\"lottery-common\",\"定义通用数据，比如统一响应数据、常量、异常、枚举等\",\"lottery-domain\",\"领域层，核心业务逻辑\",\"lottery-infrastructure\",\"基础层，为其他各层提供通用技术能力，包括数据库、Redis、ES 等\",\"lottery-interfaces\",\"用户接口层，存放与前端交互、展现数据相关的代码\",\"lottery-rpc\",\"RPC 接口文件\",\"注：因为并不了解 DDD 架构，所以每个模块目前只有模糊的概念，具体的东西在后续代码编写中进行体会\",\"阅读 210801_xfg_initProject 分支上的 POM 文件\",\"通过对 POM 文件的阅读，更加清楚的了解这个项目所使用的技术，并且通过阅读发现项目没有添加 Lombok 来简化开发，具体项目开发是否使用这个插件我不知道，但是我想用，因为我懒，所以就给加上了😄\",\"跑通 RPC\",\"定义 response 状态码枚举供通用返回对象 Result 进行使用\",\"定义通用返回对象 Result 类\",\"定义 activity 表的持久化对象\",\"定义 activity 表的 Mapper 接口\",\"定义 mybatis 配置文件\",\"定义 activity 表的 mapper.xml 文件\",\"定义 rpc 的数据传输对象(DTO) ActivityDto\",\"定义 rpc 的 请求对象 ActivityReq\",\"定义 rpc 的响应对象 ActivityRes\",\"定义 rpc 接口 IActivityBooth\",\"实现 IActivityBooth 接口\",\"编写启动类\",\"编写配置文件 application.yml\",\"编写测试模块 这个我是直接加在工程里面的，教程是单独开了一个项目\"]},\"69\":{\"h\":\"遇到的问题\",\"t\":[\"代码分层不清晰，不知道每个模块应该干什么事\",\"这个问题该怎么解决呢？我觉得最好的解决办法就是不解决，哈哈哈，因为当初学 MVC 的时候最开始也不清楚为什么要这样分层，为什么就要分 Controller、Service 和 DAO，但是后来经过大量代码的编写，也逐渐熟悉了这样的分层架构，所以现在并不想解决这个问题，具体还是靠后面的代码进行了解和熟悉吧\",\"JSON.toJSonString() 方法返回了空 {}\",\"问题出现原因，忘了加 @Data 注解，导致没有 getter/setter 就导致了这个问题，加上注解即可\",\"解决！\",\"数据库乱码问题\",\"测试模块 RPC 远程调用返回的结果为:\",\"测试结果：{\\\"activity\\\":{\\\"activityDesc\\\":\\\"?????????\\\",\\\"activityId\\\":100002,\\\"activityName\\\":\\\"????\\\",\\\"beginDateTime\\\":1705215282000,\\\"endDateTime\\\":1705215282000,\\\"stockCount\\\":100,\\\"takeCount\\\":10},\\\"result\\\":{\\\"code\\\":\\\"0000\\\",\\\"info\\\":\\\"成功\\\"}}\",\"明显的乱码问题，查看数据库，发现插入的时候就以及乱码了，看了一下配置文件中的数据库连接 url，发现使用了 useUnicode=true，并没有指定字符集，所以添加一下 utf-8 字符集即可，完整 url: jdbc:mysql://127.0.0.1:3306/lottery?useUnicode=true&characterEncoding=UTF-8\",\"再进行一轮测试，测试结果：\",\"测试结果：{\\\"activity\\\":{\\\"activityDesc\\\":\\\"仅用于插入数据测试\\\",\\\"activityId\\\":100003,\\\"activityName\\\":\\\"测试活动\\\",\\\"beginDateTime\\\":1705218054000,\\\"endDateTime\\\":1705218054000,\\\"stockCount\\\":100,\\\"takeCount\\\":10},\\\"result\\\":{\\\"code\\\":\\\"0000\\\",\\\"info\\\":\\\"成功\\\"}}\",\"解决！\"]},\"70\":{\"h\":\"总结\",\"t\":[\"今天干了说明呢？\",\"配置环境\",\"跑通 RPC\",\"具体怎么跑通 RPC 的呢？\",\"在 common 模块创建通用类\",\"在 infrastructure 模块创建 dao 接口以及和数据库相对应的 po 类\",\"在 rpc 模块下创建 RPC 通信接口以及对应的请求和响应的封装类\",\"然后在 interfaces 模块下实现 rpc 模块的接口，在这里调用 Mapper 进行增删改查\",\"然后就写配置呗，SpringBoot 配置、Dubbo 配置、MyBatis 配置\",\"学到了什么呢？\",\"由于之前学习一直使用的是 MVC 架构，并且命名不太规范，所以对于包的命名现在很不适应，比如什么dto、vo啥的各种 o 不太熟悉，这个就不准备纠结了，准备靠代码量进行熟悉\",\"对每个模块有了大概的了解，至少知道了接口写在哪个模块，接口实现类在哪个模块以及 Mapper 写在哪\",\"现在在我眼中，这个 interfaces 模块，就跟以前学的 Dubbo 的服务提供者一样吧？因为这个模块用来实现接口的，所以就会引用其他模块，要调用其他模块的东西就要添加依赖，所以这个模块起起来之后，就带动了所有模块，整个项目也就 run 起来了\",\"第一天，脑子还有点迷糊，因为基础不太牢固，所以有些小 bug 花费了挺长时间的，但是至少是跑起来了吧？也还行，路虽远，行则将至嘛，虽然年后要找实习，但是还是慌不得，慢慢来，一口吃不成个大胖子，准备晚上再补一补 Dubbo 基础\"]},\"71\":{\"c\":[\"自我介绍\",\"专业技能\",\"项目经验\"]},\"72\":{\"h\":\"个人博客搭建\"},\"73\":{\"c\":[\"技术教程\",\"专业技能\"]},\"74\":{\"h\":\"Gitee码云\"},\"75\":{\"h\":\"任务\",\"t\":[\" 环境配置\",\" 搭建项目结构\",\" 跑通广播模式 RPC 过程调用\"]},\"76\":{\"h\":\"学习过程\",\"t\":[\"项目整体了解\",\"通过对第一节文档的阅读，了解整个项目的生命周期、所需要的技术以及代码提交规范\",\"搭建项目结构，理解每个模块应该干什么\",\"模块\",\"作用\",\"Lottery\",\"总项目，用来管理整个项目的依赖\",\"lottery-application\",\"应用层，为用户接口层提供各种应用数据展现支持服务\",\"lottery-common\",\"定义通用数据，比如统一响应数据、常量、异常、枚举等\",\"lottery-domain\",\"领域层，核心业务逻辑\",\"lottery-infrastructure\",\"基础层，为其他各层提供通用技术能力，包括数据库、Redis、ES 等\",\"lottery-interfaces\",\"用户接口层，存放与前端交互、展现数据相关的代码\",\"lottery-rpc\",\"RPC 接口文件\",\"注：因为并不了解 DDD 架构，所以每个模块目前只有模糊的概念，具体的东西在后续代码编写中进行体会\",\"阅读 210801_xfg_initProject 分支上的 POM 文件\",\"通过对 POM 文件的阅读，更加清楚的了解这个项目所使用的技术，并且通过阅读发现项目没有添加 Lombok 来简化开发，具体项目开发是否使用这个插件我不知道，但是我想用，因为我懒，所以就给加上了😄\",\"跑通 RPC\",\"定义 response 状态码枚举供通用返回对象 Result 进行使用\",\"定义通用返回对象 Result 类\",\"定义 activity 表的持久化对象\",\"定义 activity 表的 Mapper 接口\",\"定义 mybatis 配置文件\",\"定义 activity 表的 mapper.xml 文件\",\"定义 rpc 的数据传输对象(DTO) ActivityDto\",\"定义 rpc 的 请求对象 ActivityReq\",\"定义 rpc 的响应对象 ActivityRes\",\"定义 rpc 接口 IActivityBooth\",\"实现 IActivityBooth 接口\",\"编写启动类\",\"编写配置文件 application.yml\",\"编写测试模块 这个我是直接加在工程里面的，教程是单独开了一个项目\"]},\"77\":{\"h\":\"遇到的问题\",\"t\":[\"代码分层不清晰，不知道每个模块应该干什么事\",\"这个问题该怎么解决呢？我觉得最好的解决办法就是不解决，哈哈哈，因为当初学 MVC 的时候最开始也不清楚为什么要这样分层，为什么就要分 Controller、Service 和 DAO，但是后来经过大量代码的编写，也逐渐熟悉了这样的分层架构，所以现在并不想解决这个问题，具体还是靠后面的代码进行了解和熟悉吧\",\"JSON.toJSonString() 方法返回了空 {}\",\"问题出现原因，忘了加 @Data 注解，导致没有 getter/setter 就导致了这个问题，加上注解即可\",\"解决！\",\"数据库乱码问题\",\"测试模块 RPC 远程调用返回的结果为:\",\"测试结果：{\\\"activity\\\":{\\\"activityDesc\\\":\\\"?????????\\\",\\\"activityId\\\":100002,\\\"activityName\\\":\\\"????\\\",\\\"beginDateTime\\\":1705215282000,\\\"endDateTime\\\":1705215282000,\\\"stockCount\\\":100,\\\"takeCount\\\":10},\\\"result\\\":{\\\"code\\\":\\\"0000\\\",\\\"info\\\":\\\"成功\\\"}}\",\"明显的乱码问题，查看数据库，发现插入的时候就以及乱码了，看了一下配置文件中的数据库连接 url，发现使用了 useUnicode=true，并没有指定字符集，所以添加一下 utf-8 字符集即可，完整 url: jdbc:mysql://127.0.0.1:3306/lottery?useUnicode=true&characterEncoding=UTF-8\",\"再进行一轮测试，测试结果：\",\"测试结果：{\\\"activity\\\":{\\\"activityDesc\\\":\\\"仅用于插入数据测试\\\",\\\"activityId\\\":100003,\\\"activityName\\\":\\\"测试活动\\\",\\\"beginDateTime\\\":1705218054000,\\\"endDateTime\\\":1705218054000,\\\"stockCount\\\":100,\\\"takeCount\\\":10},\\\"result\\\":{\\\"code\\\":\\\"0000\\\",\\\"info\\\":\\\"成功\\\"}}\",\"解决！\"]},\"78\":{\"h\":\"总结\",\"t\":[\"今天干了说明呢？\",\"配置环境\",\"跑通 RPC\",\"具体怎么跑通 RPC 的呢？\",\"在 common 模块创建通用类\",\"在 infrastructure 模块创建 dao 接口以及和数据库相对应的 po 类\",\"在 rpc 模块下创建 RPC 通信接口以及对应的请求和响应的封装类\",\"然后在 interfaces 模块下实现 rpc 模块的接口，在这里调用 Mapper 进行增删改查\",\"然后就写配置呗，SpringBoot 配置、Dubbo 配置、MyBatis 配置\",\"学到了什么呢？\",\"由于之前学习一直使用的是 MVC 架构，并且命名不太规范，所以对于包的命名现在很不适应，比如什么dto、vo啥的各种 o 不太熟悉，这个就不准备纠结了，准备靠代码量进行熟悉\",\"对每个模块有了大概的了解，至少知道了接口写在哪个模块，接口实现类在哪个模块以及 Mapper 写在哪\",\"现在在我眼中，这个 interfaces 模块，就跟以前学的 Dubbo 的服务提供者一样吧？因为这个模块用来实现接口的，所以就会引用其他模块，要调用其他模块的东西就要添加依赖，所以这个模块起起来之后，就带动了所有模块，整个项目也就 run 起来了\",\"第一天，脑子还有点迷糊，因为基础不太牢固，所以有些小 bug 花费了挺长时间的，但是至少是跑起来了吧？也还行，路虽远，行则将至嘛，虽然年后要找实习，但是还是慌不得，慢慢来，一口吃不成个大胖子，准备晚上再补一补 Dubbo 基础\"]},\"79\":{\"c\":[\"自我介绍\",\"专业技能\",\"项目经验\"]},\"80\":{\"h\":\"BUG笔记\"},\"81\":{\"h\":\"任务\",\"t\":[\" 环境配置\",\" 搭建项目结构\",\" 跑通广播模式 RPC 过程调用\"]},\"82\":{\"h\":\"学习过程\",\"t\":[\"项目整体了解\",\"通过对第一节文档的阅读，了解整个项目的生命周期、所需要的技术以及代码提交规范\",\"搭建项目结构，理解每个模块应该干什么\",\"模块\",\"作用\",\"Lottery\",\"总项目，用来管理整个项目的依赖\",\"lottery-application\",\"应用层，为用户接口层提供各种应用数据展现支持服务\",\"lottery-common\",\"定义通用数据，比如统一响应数据、常量、异常、枚举等\",\"lottery-domain\",\"领域层，核心业务逻辑\",\"lottery-infrastructure\",\"基础层，为其他各层提供通用技术能力，包括数据库、Redis、ES 等\",\"lottery-interfaces\",\"用户接口层，存放与前端交互、展现数据相关的代码\",\"lottery-rpc\",\"RPC 接口文件\",\"注：因为并不了解 DDD 架构，所以每个模块目前只有模糊的概念，具体的东西在后续代码编写中进行体会\",\"阅读 210801_xfg_initProject 分支上的 POM 文件\",\"通过对 POM 文件的阅读，更加清楚的了解这个项目所使用的技术，并且通过阅读发现项目没有添加 Lombok 来简化开发，具体项目开发是否使用这个插件我不知道，但是我想用，因为我懒，所以就给加上了😄\",\"跑通 RPC\",\"定义 response 状态码枚举供通用返回对象 Result 进行使用\",\"定义通用返回对象 Result 类\",\"定义 activity 表的持久化对象\",\"定义 activity 表的 Mapper 接口\",\"定义 mybatis 配置文件\",\"定义 activity 表的 mapper.xml 文件\",\"定义 rpc 的数据传输对象(DTO) ActivityDto\",\"定义 rpc 的 请求对象 ActivityReq\",\"定义 rpc 的响应对象 ActivityRes\",\"定义 rpc 接口 IActivityBooth\",\"实现 IActivityBooth 接口\",\"编写启动类\",\"编写配置文件 application.yml\",\"编写测试模块 这个我是直接加在工程里面的，教程是单独开了一个项目\"]},\"83\":{\"h\":\"遇到的问题\",\"t\":[\"代码分层不清晰，不知道每个模块应该干什么事\",\"这个问题该怎么解决呢？我觉得最好的解决办法就是不解决，哈哈哈，因为当初学 MVC 的时候最开始也不清楚为什么要这样分层，为什么就要分 Controller、Service 和 DAO，但是后来经过大量代码的编写，也逐渐熟悉了这样的分层架构，所以现在并不想解决这个问题，具体还是靠后面的代码进行了解和熟悉吧\",\"JSON.toJSonString() 方法返回了空 {}\",\"问题出现原因，忘了加 @Data 注解，导致没有 getter/setter 就导致了这个问题，加上注解即可\",\"解决！\",\"数据库乱码问题\",\"测试模块 RPC 远程调用返回的结果为:\",\"测试结果：{\\\"activity\\\":{\\\"activityDesc\\\":\\\"?????????\\\",\\\"activityId\\\":100002,\\\"activityName\\\":\\\"????\\\",\\\"beginDateTime\\\":1705215282000,\\\"endDateTime\\\":1705215282000,\\\"stockCount\\\":100,\\\"takeCount\\\":10},\\\"result\\\":{\\\"code\\\":\\\"0000\\\",\\\"info\\\":\\\"成功\\\"}}\",\"明显的乱码问题，查看数据库，发现插入的时候就以及乱码了，看了一下配置文件中的数据库连接 url，发现使用了 useUnicode=true，并没有指定字符集，所以添加一下 utf-8 字符集即可，完整 url: jdbc:mysql://127.0.0.1:3306/lottery?useUnicode=true&characterEncoding=UTF-8\",\"再进行一轮测试，测试结果：\",\"测试结果：{\\\"activity\\\":{\\\"activityDesc\\\":\\\"仅用于插入数据测试\\\",\\\"activityId\\\":100003,\\\"activityName\\\":\\\"测试活动\\\",\\\"beginDateTime\\\":1705218054000,\\\"endDateTime\\\":1705218054000,\\\"stockCount\\\":100,\\\"takeCount\\\":10},\\\"result\\\":{\\\"code\\\":\\\"0000\\\",\\\"info\\\":\\\"成功\\\"}}\",\"解决！\"]},\"84\":{\"h\":\"总结\",\"t\":[\"今天干了说明呢？\",\"配置环境\",\"跑通 RPC\",\"具体怎么跑通 RPC 的呢？\",\"在 common 模块创建通用类\",\"在 infrastructure 模块创建 dao 接口以及和数据库相对应的 po 类\",\"在 rpc 模块下创建 RPC 通信接口以及对应的请求和响应的封装类\",\"然后在 interfaces 模块下实现 rpc 模块的接口，在这里调用 Mapper 进行增删改查\",\"然后就写配置呗，SpringBoot 配置、Dubbo 配置、MyBatis 配置\",\"学到了什么呢？\",\"由于之前学习一直使用的是 MVC 架构，并且命名不太规范，所以对于包的命名现在很不适应，比如什么dto、vo啥的各种 o 不太熟悉，这个就不准备纠结了，准备靠代码量进行熟悉\",\"对每个模块有了大概的了解，至少知道了接口写在哪个模块，接口实现类在哪个模块以及 Mapper 写在哪\",\"现在在我眼中，这个 interfaces 模块，就跟以前学的 Dubbo 的服务提供者一样吧？因为这个模块用来实现接口的，所以就会引用其他模块，要调用其他模块的东西就要添加依赖，所以这个模块起起来之后，就带动了所有模块，整个项目也就 run 起来了\",\"第一天，脑子还有点迷糊，因为基础不太牢固，所以有些小 bug 花费了挺长时间的，但是至少是跑起来了吧？也还行，路虽远，行则将至嘛，虽然年后要找实习，但是还是慌不得，慢慢来，一口吃不成个大胖子，准备晚上再补一补 Dubbo 基础\"]},\"85\":{\"c\":[\"自我介绍\",\"专业技能\",\"项目经验\"]},\"86\":{\"h\":\"项目设计\"},\"87\":{\"h\":\"任务\",\"t\":[\" 环境配置\",\" 搭建项目结构\",\" 跑通广播模式 RPC 过程调用\"]},\"88\":{\"h\":\"学习过程\",\"t\":[\"项目整体了解\",\"通过对第一节文档的阅读，了解整个项目的生命周期、所需要的技术以及代码提交规范\",\"搭建项目结构，理解每个模块应该干什么\",\"模块\",\"作用\",\"Lottery\",\"总项目，用来管理整个项目的依赖\",\"lottery-application\",\"应用层，为用户接口层提供各种应用数据展现支持服务\",\"lottery-common\",\"定义通用数据，比如统一响应数据、常量、异常、枚举等\",\"lottery-domain\",\"领域层，核心业务逻辑\",\"lottery-infrastructure\",\"基础层，为其他各层提供通用技术能力，包括数据库、Redis、ES 等\",\"lottery-interfaces\",\"用户接口层，存放与前端交互、展现数据相关的代码\",\"lottery-rpc\",\"RPC 接口文件\",\"注：因为并不了解 DDD 架构，所以每个模块目前只有模糊的概念，具体的东西在后续代码编写中进行体会\",\"阅读 210801_xfg_initProject 分支上的 POM 文件\",\"通过对 POM 文件的阅读，更加清楚的了解这个项目所使用的技术，并且通过阅读发现项目没有添加 Lombok 来简化开发，具体项目开发是否使用这个插件我不知道，但是我想用，因为我懒，所以就给加上了😄\",\"跑通 RPC\",\"定义 response 状态码枚举供通用返回对象 Result 进行使用\",\"定义通用返回对象 Result 类\",\"定义 activity 表的持久化对象\",\"定义 activity 表的 Mapper 接口\",\"定义 mybatis 配置文件\",\"定义 activity 表的 mapper.xml 文件\",\"定义 rpc 的数据传输对象(DTO) ActivityDto\",\"定义 rpc 的 请求对象 ActivityReq\",\"定义 rpc 的响应对象 ActivityRes\",\"定义 rpc 接口 IActivityBooth\",\"实现 IActivityBooth 接口\",\"编写启动类\",\"编写配置文件 application.yml\",\"编写测试模块 这个我是直接加在工程里面的，教程是单独开了一个项目\"]},\"89\":{\"h\":\"遇到的问题\",\"t\":[\"代码分层不清晰，不知道每个模块应该干什么事\",\"这个问题该怎么解决呢？我觉得最好的解决办法就是不解决，哈哈哈，因为当初学 MVC 的时候最开始也不清楚为什么要这样分层，为什么就要分 Controller、Service 和 DAO，但是后来经过大量代码的编写，也逐渐熟悉了这样的分层架构，所以现在并不想解决这个问题，具体还是靠后面的代码进行了解和熟悉吧\",\"JSON.toJSonString() 方法返回了空 {}\",\"问题出现原因，忘了加 @Data 注解，导致没有 getter/setter 就导致了这个问题，加上注解即可\",\"解决！\",\"数据库乱码问题\",\"测试模块 RPC 远程调用返回的结果为:\",\"测试结果：{\\\"activity\\\":{\\\"activityDesc\\\":\\\"?????????\\\",\\\"activityId\\\":100002,\\\"activityName\\\":\\\"????\\\",\\\"beginDateTime\\\":1705215282000,\\\"endDateTime\\\":1705215282000,\\\"stockCount\\\":100,\\\"takeCount\\\":10},\\\"result\\\":{\\\"code\\\":\\\"0000\\\",\\\"info\\\":\\\"成功\\\"}}\",\"明显的乱码问题，查看数据库，发现插入的时候就以及乱码了，看了一下配置文件中的数据库连接 url，发现使用了 useUnicode=true，并没有指定字符集，所以添加一下 utf-8 字符集即可，完整 url: jdbc:mysql://127.0.0.1:3306/lottery?useUnicode=true&characterEncoding=UTF-8\",\"再进行一轮测试，测试结果：\",\"测试结果：{\\\"activity\\\":{\\\"activityDesc\\\":\\\"仅用于插入数据测试\\\",\\\"activityId\\\":100003,\\\"activityName\\\":\\\"测试活动\\\",\\\"beginDateTime\\\":1705218054000,\\\"endDateTime\\\":1705218054000,\\\"stockCount\\\":100,\\\"takeCount\\\":10},\\\"result\\\":{\\\"code\\\":\\\"0000\\\",\\\"info\\\":\\\"成功\\\"}}\",\"解决！\"]},\"90\":{\"h\":\"总结\",\"t\":[\"今天干了说明呢？\",\"配置环境\",\"跑通 RPC\",\"具体怎么跑通 RPC 的呢？\",\"在 common 模块创建通用类\",\"在 infrastructure 模块创建 dao 接口以及和数据库相对应的 po 类\",\"在 rpc 模块下创建 RPC 通信接口以及对应的请求和响应的封装类\",\"然后在 interfaces 模块下实现 rpc 模块的接口，在这里调用 Mapper 进行增删改查\",\"然后就写配置呗，SpringBoot 配置、Dubbo 配置、MyBatis 配置\",\"学到了什么呢？\",\"由于之前学习一直使用的是 MVC 架构，并且命名不太规范，所以对于包的命名现在很不适应，比如什么dto、vo啥的各种 o 不太熟悉，这个就不准备纠结了，准备靠代码量进行熟悉\",\"对每个模块有了大概的了解，至少知道了接口写在哪个模块，接口实现类在哪个模块以及 Mapper 写在哪\",\"现在在我眼中，这个 interfaces 模块，就跟以前学的 Dubbo 的服务提供者一样吧？因为这个模块用来实现接口的，所以就会引用其他模块，要调用其他模块的东西就要添加依赖，所以这个模块起起来之后，就带动了所有模块，整个项目也就 run 起来了\",\"第一天，脑子还有点迷糊，因为基础不太牢固，所以有些小 bug 花费了挺长时间的，但是至少是跑起来了吧？也还行，路虽远，行则将至嘛，虽然年后要找实习，但是还是慌不得，慢慢来，一口吃不成个大胖子，准备晚上再补一补 Dubbo 基础\"]},\"91\":{\"c\":[\"自我介绍\",\"专业技能\",\"项目经验\"]},\"92\":{\"h\":\"开发日志\"},\"93\":{\"h\":\"任务\",\"t\":[\" 环境配置\",\" 搭建项目结构\",\" 跑通广播模式 RPC 过程调用\"]},\"94\":{\"h\":\"学习过程\",\"t\":[\"项目整体了解\",\"通过对第一节文档的阅读，了解整个项目的生命周期、所需要的技术以及代码提交规范\",\"搭建项目结构，理解每个模块应该干什么\",\"模块\",\"作用\",\"Lottery\",\"总项目，用来管理整个项目的依赖\",\"lottery-application\",\"应用层，为用户接口层提供各种应用数据展现支持服务\",\"lottery-common\",\"定义通用数据，比如统一响应数据、常量、异常、枚举等\",\"lottery-domain\",\"领域层，核心业务逻辑\",\"lottery-infrastructure\",\"基础层，为其他各层提供通用技术能力，包括数据库、Redis、ES 等\",\"lottery-interfaces\",\"用户接口层，存放与前端交互、展现数据相关的代码\",\"lottery-rpc\",\"RPC 接口文件\",\"注：因为并不了解 DDD 架构，所以每个模块目前只有模糊的概念，具体的东西在后续代码编写中进行体会\",\"阅读 210801_xfg_initProject 分支上的 POM 文件\",\"通过对 POM 文件的阅读，更加清楚的了解这个项目所使用的技术，并且通过阅读发现项目没有添加 Lombok 来简化开发，具体项目开发是否使用这个插件我不知道，但是我想用，因为我懒，所以就给加上了😄\",\"跑通 RPC\",\"定义 response 状态码枚举供通用返回对象 Result 进行使用\",\"定义通用返回对象 Result 类\",\"定义 activity 表的持久化对象\",\"定义 activity 表的 Mapper 接口\",\"定义 mybatis 配置文件\",\"定义 activity 表的 mapper.xml 文件\",\"定义 rpc 的数据传输对象(DTO) ActivityDto\",\"定义 rpc 的 请求对象 ActivityReq\",\"定义 rpc 的响应对象 ActivityRes\",\"定义 rpc 接口 IActivityBooth\",\"实现 IActivityBooth 接口\",\"编写启动类\",\"编写配置文件 application.yml\",\"编写测试模块 这个我是直接加在工程里面的，教程是单独开了一个项目\"]},\"95\":{\"h\":\"遇到的问题\",\"t\":[\"代码分层不清晰，不知道每个模块应该干什么事\",\"这个问题该怎么解决呢？我觉得最好的解决办法就是不解决，哈哈哈，因为当初学 MVC 的时候最开始也不清楚为什么要这样分层，为什么就要分 Controller、Service 和 DAO，但是后来经过大量代码的编写，也逐渐熟悉了这样的分层架构，所以现在并不想解决这个问题，具体还是靠后面的代码进行了解和熟悉吧\",\"JSON.toJSonString() 方法返回了空 {}\",\"问题出现原因，忘了加 @Data 注解，导致没有 getter/setter 就导致了这个问题，加上注解即可\",\"解决！\",\"数据库乱码问题\",\"测试模块 RPC 远程调用返回的结果为:\",\"测试结果：{\\\"activity\\\":{\\\"activityDesc\\\":\\\"?????????\\\",\\\"activityId\\\":100002,\\\"activityName\\\":\\\"????\\\",\\\"beginDateTime\\\":1705215282000,\\\"endDateTime\\\":1705215282000,\\\"stockCount\\\":100,\\\"takeCount\\\":10},\\\"result\\\":{\\\"code\\\":\\\"0000\\\",\\\"info\\\":\\\"成功\\\"}}\",\"明显的乱码问题，查看数据库，发现插入的时候就以及乱码了，看了一下配置文件中的数据库连接 url，发现使用了 useUnicode=true，并没有指定字符集，所以添加一下 utf-8 字符集即可，完整 url: jdbc:mysql://127.0.0.1:3306/lottery?useUnicode=true&characterEncoding=UTF-8\",\"再进行一轮测试，测试结果：\",\"测试结果：{\\\"activity\\\":{\\\"activityDesc\\\":\\\"仅用于插入数据测试\\\",\\\"activityId\\\":100003,\\\"activityName\\\":\\\"测试活动\\\",\\\"beginDateTime\\\":1705218054000,\\\"endDateTime\\\":1705218054000,\\\"stockCount\\\":100,\\\"takeCount\\\":10},\\\"result\\\":{\\\"code\\\":\\\"0000\\\",\\\"info\\\":\\\"成功\\\"}}\",\"解决！\"]},\"96\":{\"h\":\"总结\",\"t\":[\"今天干了说明呢？\",\"配置环境\",\"跑通 RPC\",\"具体怎么跑通 RPC 的呢？\",\"在 common 模块创建通用类\",\"在 infrastructure 模块创建 dao 接口以及和数据库相对应的 po 类\",\"在 rpc 模块下创建 RPC 通信接口以及对应的请求和响应的封装类\",\"然后在 interfaces 模块下实现 rpc 模块的接口，在这里调用 Mapper 进行增删改查\",\"然后就写配置呗，SpringBoot 配置、Dubbo 配置、MyBatis 配置\",\"学到了什么呢？\",\"由于之前学习一直使用的是 MVC 架构，并且命名不太规范，所以对于包的命名现在很不适应，比如什么dto、vo啥的各种 o 不太熟悉，这个就不准备纠结了，准备靠代码量进行熟悉\",\"对每个模块有了大概的了解，至少知道了接口写在哪个模块，接口实现类在哪个模块以及 Mapper 写在哪\",\"现在在我眼中，这个 interfaces 模块，就跟以前学的 Dubbo 的服务提供者一样吧？因为这个模块用来实现接口的，所以就会引用其他模块，要调用其他模块的东西就要添加依赖，所以这个模块起起来之后，就带动了所有模块，整个项目也就 run 起来了\",\"第一天，脑子还有点迷糊，因为基础不太牢固，所以有些小 bug 花费了挺长时间的，但是至少是跑起来了吧？也还行，路虽远，行则将至嘛，虽然年后要找实习，但是还是慌不得，慢慢来，一口吃不成个大胖子，准备晚上再补一补 Dubbo 基础\"]},\"97\":{\"c\":[\"自我介绍\",\"专业技能\",\"项目经验\"]},\"98\":{\"h\":\"\",\"t\":[\"404 Not Found\"]}},\"dirtCount\":0,\"index\":[[\"found\",{\"1\":{\"98\":1}}],[\"今天不亏\",{\"1\":{\"64\":1}}],[\"今天干了说明呢\",{\"1\":{\"5\":1,\"22\":1,\"28\":1,\"34\":1,\"40\":1,\"46\":1,\"52\":1,\"58\":1,\"64\":1,\"70\":1,\"78\":1,\"84\":1,\"90\":1,\"96\":1}}],[\"返回得还慢\",{\"1\":{\"64\":1}}],[\"又臭又长\",{\"1\":{\"64\":1}}],[\"又从\",{\"1\":{\"13\":1}}],[\"而不是之前那样直接单线程一个流程写完\",{\"1\":{\"64\":1}}],[\"而且\",{\"1\":{\"13\":1}}],[\"他只需要点进去\",{\"1\":{\"64\":1}}],[\"大营销抽奖\",{\"0\":{\"54\":1}}],[\"大模型有多种\",{\"1\":{\"15\":1}}],[\"大模型\",{\"1\":{\"15\":1}}],[\"教程手册\",{\"0\":{\"30\":1}}],[\"教程是单独开了一个项目\",{\"1\":{\"3\":1,\"20\":1,\"26\":1,\"32\":1,\"38\":1,\"44\":1,\"50\":1,\"56\":1,\"62\":1,\"68\":1,\"76\":1,\"82\":1,\"88\":1,\"94\":1}}],[\"从而更好地满足不同的业务需求\",{\"1\":{\"16\":1}}],[\"方便用户根据自身需求扩展功能\",{\"1\":{\"16\":1}}],[\"方法返回了空\",{\"1\":{\"4\":1,\"21\":1,\"27\":1,\"33\":1,\"39\":1,\"45\":1,\"51\":1,\"57\":1,\"63\":1,\"69\":1,\"77\":1,\"83\":1,\"89\":1,\"95\":1}}],[\"此外\",{\"1\":{\"16\":1}}],[\"此项目以应用openai技术\",{\"1\":{\"15\":1}}],[\"利用springboot的自动化配置机制简化了集成和使用\",{\"1\":{\"16\":1}}],[\"减少了开发工作量和出错风险\",{\"1\":{\"16\":1}}],[\"减少研发成本\",{\"1\":{\"10\":1}}],[\"白名单等服务治理功能\",{\"1\":{\"16\":1}}],[\"白名单\",{\"1\":{\"16\":1}}],[\"切量和白名单等\",{\"1\":{\"16\":1}}],[\"切量\",{\"1\":{\"16\":2}}],[\"降级\",{\"1\":{\"16\":3}}],[\"组件开发\",{\"1\":{\"16\":1}}],[\"组合\",{\"1\":{\"10\":1,\"13\":1}}],[\"中间件\",{\"0\":{\"16\":1},\"1\":{\"16\":1}}],[\"404\",{\"1\":{\"98\":1}}],[\"4\",{\"0\":{\"16\":1}}],[\"你还可以根据项目中提到的各类技术和章节\",{\"1\":{\"15\":1}}],[\"掉单补偿等核心流程实现\",{\"1\":{\"15\":1}}],[\"异步发货\",{\"1\":{\"15\":1}}],[\"异常\",{\"1\":{\"3\":1,\"20\":1,\"26\":1,\"32\":1,\"38\":1,\"44\":1,\"50\":1,\"56\":1,\"62\":1,\"68\":1,\"76\":1,\"82\":1,\"88\":1,\"94\":1}}],[\"下单支付\",{\"1\":{\"15\":1}}],[\"来慢慢操作\",{\"1\":{\"64\":1}}],[\"来编写你的职责\",{\"1\":{\"15\":1}}],[\"来解决各类场景问题\",{\"1\":{\"15\":1}}],[\"来简化开发\",{\"1\":{\"3\":1,\"20\":1,\"26\":1,\"32\":1,\"38\":1,\"44\":1,\"50\":1,\"56\":1,\"62\":1,\"68\":1,\"76\":1,\"82\":1,\"88\":1,\"94\":1}}],[\"会话模型进行处理\",{\"1\":{\"15\":1}}],[\"会话功能实现中\",{\"1\":{\"14\":1}}],[\"鉴于组内同类需求的重复开发\",{\"1\":{\"16\":1}}],[\"鉴于生成式服务的文本生成可能会有不可靠信息\",{\"1\":{\"15\":1}}],[\"鉴于系统内有较多的规则策略过滤\",{\"1\":{\"13\":1}}],[\"事件\",{\"1\":{\"15\":1}}],[\"事务和插件\",{\"1\":{\"10\":1}}],[\"仓储\",{\"1\":{\"15\":1}}],[\"采用了较多的分治\",{\"1\":{\"15\":1}}],[\"采用了\",{\"1\":{\"15\":1}}],[\"采用\",{\"1\":{\"15\":1}}],[\"按照职责边界进行拆分设计\",{\"1\":{\"15\":1}}],[\"按需编写\",{\"1\":{\"15\":1}}],[\"我采用了微服务的架构设计\",{\"1\":{\"15\":1}}],[\"我觉得最好的解决办法就是不解决\",{\"1\":{\"4\":1,\"21\":1,\"27\":1,\"33\":1,\"39\":1,\"45\":1,\"51\":1,\"57\":1,\"63\":1,\"69\":1,\"77\":1,\"83\":1,\"89\":1,\"95\":1}}],[\"消息接入\",{\"1\":{\"15\":1}}],[\"独立接入\",{\"1\":{\"15\":1}}],[\"后续势必会有更多的场景以不同的方式接入\",{\"1\":{\"15\":1}}],[\"实训的第一个openai项目\",{\"1\":{\"15\":1}}],[\"实践\",{\"1\":{\"15\":1}}],[\"实现自动化部署\",{\"1\":{\"10\":1}}],[\"实现方式和应用价值\",{\"1\":{\"10\":1}}],[\"实现\",{\"1\":{\"3\":1,\"20\":1,\"26\":1,\"32\":1,\"38\":1,\"44\":1,\"50\":1,\"56\":1,\"62\":1,\"68\":1,\"76\":1,\"82\":1,\"88\":1,\"94\":1}}],[\"首先这是我们xxx公司\",{\"1\":{\"15\":1}}],[\"首先学习到为什么日常使用\",{\"1\":{\"14\":1}}],[\"让用户可以在线购买对话额度\",{\"1\":{\"15\":1}}],[\"让不同的场景诉求都可以配置化对接\",{\"1\":{\"15\":1}}],[\"让我对\",{\"1\":{\"14\":1}}],[\"积木式构建应用\",{\"1\":{\"15\":1}}],[\"暂时申请中\",{\"1\":{\"15\":1}}],[\"企业支付\",{\"1\":{\"15\":1}}],[\"公众号鉴权\",{\"1\":{\"15\":1}}],[\"公司\",{\"1\":{\"11\":1}}],[\"涵盖\",{\"1\":{\"15\":1}}],[\"对接微信扫码支付\",{\"1\":{\"15\":1}}],[\"对接多种大模型提供生成式服务\",{\"1\":{\"15\":1}}],[\"对每个模块有了大概的了解\",{\"1\":{\"5\":1,\"22\":1,\"28\":1,\"34\":1,\"40\":1,\"46\":1,\"52\":1,\"58\":1,\"64\":1,\"70\":1,\"78\":1,\"84\":1,\"90\":1,\"96\":1}}],[\"腾讯混元等\",{\"1\":{\"15\":1}}],[\"前端界面\",{\"1\":{\"15\":1}}],[\"web\",{\"1\":{\"15\":1}}],[\"多模型组件\",{\"1\":{\"15\":1}}],[\"辅助工作提效工具开发\",{\"0\":{\"15\":1}}],[\"3\",{\"0\":{\"15\":1}}],[\"3306\",{\"1\":{\"4\":1,\"21\":1,\"27\":1,\"33\":1,\"39\":1,\"45\":1,\"51\":1,\"57\":1,\"63\":1,\"69\":1,\"77\":1,\"83\":1,\"89\":1,\"95\":1}}],[\"便于以后应用和从根上快速排查解决问题\",{\"1\":{\"14\":1}}],[\"已经非常清晰\",{\"1\":{\"14\":1}}],[\"整合的实现\",{\"1\":{\"14\":1}}],[\"整个项目也就\",{\"1\":{\"5\":1,\"22\":1,\"28\":1,\"34\":1,\"40\":1,\"46\":1,\"52\":1,\"58\":1,\"64\":1,\"70\":1,\"78\":1,\"84\":1,\"90\":1,\"96\":1}}],[\"二级缓存的装饰器模式使用\",{\"1\":{\"14\":1}}],[\"还有一级缓存\",{\"1\":{\"14\":1}}],[\"还支持\",{\"1\":{\"13\":1}}],[\"除此之外\",{\"1\":{\"14\":1}}],[\"提供更多的解决方案\",{\"1\":{\"14\":1}}],[\"提高开发效率和降低重复开发成本\",{\"1\":{\"16\":1}}],[\"提高了设计思维和编码能力\",{\"1\":{\"14\":1}}],[\"提高交付效率\",{\"1\":{\"13\":1}}],[\"字段加解密等操作\",{\"1\":{\"14\":1}}],[\"字符集即可\",{\"1\":{\"4\":1,\"21\":1,\"27\":1,\"33\":1,\"39\":1,\"45\":1,\"51\":1,\"57\":1,\"63\":1,\"69\":1,\"77\":1,\"83\":1,\"89\":1,\"95\":1}}],[\"库表路由\",{\"1\":{\"14\":1}}],[\"库存分片和秒杀滑动库存分块\",{\"1\":{\"13\":1}}],[\"做出日志监控\",{\"1\":{\"14\":1}}],[\"彻底了解并掌握了\",{\"1\":{\"14\":1}}],[\"统一调度执行器使用和数据的封装\",{\"1\":{\"14\":1}}],[\"其中感触最大的是\",{\"1\":{\"14\":1}}],[\"封装调用逻辑到\",{\"1\":{\"14\":1}}],[\"时\",{\"1\":{\"14\":1}}],[\"时间\",{\"1\":{\"9\":1,\"11\":1}}],[\"技术教程\",{\"2\":{\"73\":1}}],[\"技术积累颇深\",{\"1\":{\"14\":1}}],[\"技术组件\",{\"1\":{\"13\":1}}],[\"框架完成模型对接\",{\"1\":{\"15\":1}}],[\"框架\",{\"1\":{\"14\":1}}],[\"框架的设计思想\",{\"1\":{\"10\":1}}],[\"一个领域就是一个功能域\",{\"1\":{\"15\":1}}],[\"一书\",{\"1\":{\"14\":1}}],[\"一口吃不成个大胖子\",{\"1\":{\"5\":1,\"22\":1,\"28\":1,\"34\":1,\"40\":1,\"46\":1,\"52\":1,\"58\":1,\"64\":1,\"70\":1,\"78\":1,\"84\":1,\"90\":1,\"96\":1}}],[\"渐进式源码实践\",{\"1\":{\"14\":1}}],[\"深度学习了\",{\"1\":{\"14\":1}}],[\"深入学习\",{\"1\":{\"10\":2}}],[\"深入理解\",{\"1\":{\"10\":3}}],[\"才能更好更高效的工作\",{\"1\":{\"14\":1}}],[\"插件开发能力\",{\"1\":{\"14\":1}}],[\"插件机制\",{\"1\":{\"10\":1}}],[\"需要较深入的学习和使用\",{\"1\":{\"14\":1}}],[\"非常常用的技术框架\",{\"1\":{\"14\":1}}],[\"应用服务api封装\",{\"1\":{\"15\":1}}],[\"应用服务\",{\"0\":{\"15\":1}}],[\"应用编程开发中\",{\"1\":{\"14\":1}}],[\"应用层\",{\"1\":{\"3\":1,\"20\":1,\"26\":1,\"32\":1,\"38\":1,\"44\":1,\"50\":1,\"56\":1,\"62\":1,\"68\":1,\"76\":1,\"82\":1,\"88\":1,\"94\":1}}],[\"是\",{\"1\":{\"14\":1}}],[\"手写mybatis\",{\"1\":{\"14\":1}}],[\"手写\",{\"0\":{\"14\":1}}],[\"2\",{\"0\":{\"14\":1}}],[\"210801\",{\"1\":{\"3\":1,\"20\":1,\"26\":1,\"32\":1,\"38\":1,\"44\":1,\"50\":1,\"56\":1,\"62\":1,\"68\":1,\"76\":1,\"82\":1,\"88\":1,\"94\":1}}],[\"导致用户一直等待\",{\"1\":{\"13\":1}}],[\"导致没有\",{\"1\":{\"4\":1,\"21\":1,\"27\":1,\"33\":1,\"39\":1,\"45\":1,\"51\":1,\"57\":1,\"63\":1,\"69\":1,\"77\":1,\"83\":1,\"89\":1,\"95\":1}}],[\"避免一个流程太长\",{\"1\":{\"13\":1}}],[\"把抽奖和发奖用mq消息串联起来\",{\"1\":{\"13\":1}}],[\"解耦抽奖流程\",{\"1\":{\"13\":1}}],[\"解决日常场景问题\",{\"1\":{\"14\":1}}],[\"解决\",{\"1\":{\"4\":2,\"21\":2,\"27\":2,\"33\":2,\"39\":2,\"45\":2,\"51\":2,\"57\":2,\"63\":2,\"69\":2,\"77\":2,\"83\":2,\"89\":2,\"95\":2}}],[\"优化后整体秒杀有了非常可观的性能提升\",{\"1\":{\"13\":1}}],[\"优化为滑块锁\",{\"1\":{\"13\":1}}],[\"加锁\",{\"1\":{\"13\":1}}],[\"加上注解即可\",{\"1\":{\"4\":1,\"21\":1,\"27\":1,\"33\":1,\"39\":1,\"45\":1,\"51\":1,\"57\":1,\"63\":1,\"69\":1,\"77\":1,\"83\":1,\"89\":1,\"95\":1}}],[\"key\",{\"1\":{\"13\":2}}],[\"kafka\",{\"1\":{\"10\":1}}],[\"将秒杀从最开始的数据库行级锁优化为redis\",{\"1\":{\"13\":1}}],[\"将你的个人介绍和档案放置在此处\",{\"1\":{\"0\":1}}],[\"因活动秒杀的并发场景\",{\"1\":{\"13\":1}}],[\"因为基础不太牢固\",{\"1\":{\"5\":1,\"22\":1,\"28\":1,\"34\":1,\"40\":1,\"46\":1,\"52\":1,\"58\":1,\"64\":1,\"70\":1,\"78\":1,\"84\":1,\"90\":1,\"96\":1}}],[\"因为这个模块用来实现接口的\",{\"1\":{\"5\":1,\"22\":1,\"28\":1,\"34\":1,\"40\":1,\"46\":1,\"52\":1,\"58\":1,\"64\":1,\"70\":1,\"78\":1,\"84\":1,\"90\":1,\"96\":1}}],[\"因为当初学\",{\"1\":{\"4\":1,\"21\":1,\"27\":1,\"33\":1,\"39\":1,\"45\":1,\"51\":1,\"57\":1,\"63\":1,\"69\":1,\"77\":1,\"83\":1,\"89\":1,\"95\":1}}],[\"因为我懒\",{\"1\":{\"3\":1,\"20\":1,\"26\":1,\"32\":1,\"38\":1,\"44\":1,\"50\":1,\"56\":1,\"62\":1,\"68\":1,\"76\":1,\"82\":1,\"88\":1,\"94\":1}}],[\"因为并不了解\",{\"1\":{\"3\":1,\"20\":1,\"26\":1,\"32\":1,\"38\":1,\"44\":1,\"50\":1,\"56\":1,\"62\":1,\"68\":1,\"76\":1,\"82\":1,\"88\":1,\"94\":1}}],[\"工厂统一对外提供\",{\"1\":{\"14\":1}}],[\"工厂三个设计模式\",{\"1\":{\"13\":1}}],[\"工作经历\",{\"0\":{\"11\":1}}],[\"工作时间\",{\"1\":{\"8\":1}}],[\"策略\",{\"1\":{\"13\":1}}],[\"策略等设计模式的综合使用\",{\"1\":{\"13\":1}}],[\"策略等设计模式\",{\"1\":{\"10\":1}}],[\"运用模板\",{\"1\":{\"13\":1}}],[\"运用设计原则和工厂\",{\"1\":{\"13\":1}}],[\"简单\",{\"1\":{\"13\":3}}],[\"支持横向扩展\",{\"1\":{\"13\":1}}],[\"该中间件还提供了可扩展的接口\",{\"1\":{\"16\":1}}],[\"该中间件可以简化集成和使用\",{\"1\":{\"16\":1}}],[\"该中间件的核心功能包括服务治理中的熔断\",{\"1\":{\"16\":1}}],[\"该springboot\",{\"1\":{\"16\":1}}],[\"该套组件已经经历了多次大促活动场景的考验\",{\"1\":{\"13\":1}}],[\"该组件不仅可以满足差异化不同字段的分库分表组合\",{\"1\":{\"13\":1}}],[\"该系统运用抽象\",{\"1\":{\"13\":1}}],[\"~\",{\"1\":{\"13\":1}}],[\"5000\",{\"1\":{\"13\":1}}],[\"根据实际秒杀峰值场景\",{\"1\":{\"13\":1}}],[\"完成从商品库\",{\"1\":{\"15\":1}}],[\"完成数据库操作\",{\"1\":{\"14\":1}}],[\"完成自由组合的人群过滤服务\",{\"1\":{\"13\":1}}],[\"完整实现了一个\",{\"1\":{\"14\":1}}],[\"完整\",{\"1\":{\"4\":1,\"21\":1,\"27\":1,\"33\":1,\"39\":1,\"45\":1,\"51\":1,\"57\":1,\"63\":1,\"69\":1,\"77\":1,\"83\":1,\"89\":1,\"95\":1}}],[\"风控\",{\"1\":{\"13\":1}}],[\"人群控制\",{\"1\":{\"16\":1}}],[\"人群\",{\"1\":{\"13\":1}}],[\"模板\",{\"1\":{\"13\":1}}],[\"模块的接口\",{\"1\":{\"5\":1,\"22\":1,\"28\":1,\"34\":1,\"40\":1,\"46\":1,\"52\":1,\"58\":1,\"64\":1,\"70\":1,\"78\":1,\"84\":1,\"90\":1,\"96\":1}}],[\"模块下实现\",{\"1\":{\"5\":1,\"22\":1,\"28\":1,\"34\":1,\"40\":1,\"46\":1,\"52\":1,\"58\":1,\"64\":1,\"70\":1,\"78\":1,\"84\":1,\"90\":1,\"96\":1}}],[\"模块下创建\",{\"1\":{\"5\":1,\"22\":1,\"28\":1,\"34\":1,\"40\":1,\"46\":1,\"52\":1,\"58\":1,\"64\":1,\"70\":1,\"78\":1,\"84\":1,\"90\":1,\"96\":1}}],[\"模块创建\",{\"1\":{\"5\":1,\"22\":1,\"28\":1,\"34\":1,\"40\":1,\"46\":1,\"52\":1,\"58\":1,\"64\":1,\"70\":1,\"78\":1,\"84\":1,\"90\":1,\"96\":1}}],[\"模块创建通用类\",{\"1\":{\"5\":1,\"22\":1,\"28\":1,\"34\":1,\"40\":1,\"46\":1,\"52\":1,\"58\":1,\"64\":1,\"70\":1,\"78\":1,\"84\":1,\"90\":1,\"96\":1}}],[\"模块\",{\"1\":{\"3\":1,\"5\":1,\"20\":1,\"22\":1,\"26\":1,\"28\":1,\"32\":1,\"34\":1,\"38\":1,\"40\":1,\"44\":1,\"46\":1,\"50\":1,\"52\":1,\"56\":1,\"58\":1,\"62\":1,\"64\":1,\"68\":1,\"70\":1,\"76\":1,\"78\":1,\"82\":1,\"84\":1,\"88\":1,\"90\":1,\"94\":1,\"96\":1}}],[\"构建以\",{\"1\":{\"13\":1}}],[\"构建出易于迭代和维护的工程架构\",{\"1\":{\"10\":1}}],[\"高级\",{\"1\":{\"13\":3}}],[\"这样的方式更好扩展\",{\"1\":{\"15\":1}}],[\"这样可以更好扩展\",{\"1\":{\"15\":1}}],[\"这部分在架构上设计独立的\",{\"1\":{\"15\":1}}],[\"这是因为做了代理与映射\",{\"1\":{\"14\":1}}],[\"这降低了共性功能重复开发所带来的成本问题\",{\"1\":{\"13\":1}}],[\"这可以满足业务产品快速迭代上线的需求\",{\"1\":{\"13\":1}}],[\"这个东西还是很有用的\",{\"1\":{\"64\":1}}],[\"这个技术可以让我基于\",{\"1\":{\"14\":1}}],[\"这个\",{\"1\":{\"5\":1,\"22\":1,\"28\":1,\"34\":1,\"40\":1,\"46\":1,\"52\":1,\"58\":1,\"64\":1,\"70\":1,\"78\":1,\"84\":1,\"90\":1,\"96\":1}}],[\"这个就不准备纠结了\",{\"1\":{\"5\":1,\"22\":1,\"28\":1,\"34\":1,\"40\":1,\"46\":1,\"52\":1,\"58\":1,\"64\":1,\"70\":1,\"78\":1,\"84\":1,\"90\":1,\"96\":1}}],[\"这个问题该怎么解决呢\",{\"1\":{\"4\":1,\"21\":1,\"27\":1,\"33\":1,\"39\":1,\"45\":1,\"51\":1,\"57\":1,\"63\":1,\"69\":1,\"77\":1,\"83\":1,\"89\":1,\"95\":1}}],[\"这个我是直接加在工程里面的\",{\"1\":{\"3\":1,\"20\":1,\"26\":1,\"32\":1,\"38\":1,\"44\":1,\"50\":1,\"56\":1,\"62\":1,\"68\":1,\"76\":1,\"82\":1,\"88\":1,\"94\":1}}],[\"奖品发放等\",{\"1\":{\"13\":1}}],[\"活动玩法\",{\"1\":{\"13\":1}}],[\"围绕抽奖服务建设领域服务\",{\"1\":{\"13\":1}}],[\"凝练领域服务功能\",{\"1\":{\"13\":1}}],[\"拆解服务边界\",{\"1\":{\"13\":1}}],[\"知识\",{\"1\":{\"13\":1}}],[\"留存等\",{\"1\":{\"13\":1}}],[\"促活\",{\"1\":{\"13\":1}}],[\"例如拉新\",{\"1\":{\"13\":1}}],[\"端人群的需求\",{\"1\":{\"13\":1}}],[\"可对接chatglm\",{\"1\":{\"15\":1}}],[\"可以仅提供\",{\"1\":{\"14\":1}}],[\"可以满足业务规模的快速增长\",{\"1\":{\"13\":1}}],[\"可以满足\",{\"1\":{\"13\":1}}],[\"可选\",{\"1\":{\"11\":2}}],[\"抽象的思想和设计模式和设计原则知识的运用\",{\"1\":{\"15\":1}}],[\"抽象和知识\",{\"1\":{\"10\":1}}],[\"抽奖策略\",{\"1\":{\"13\":1}}],[\"抽奖系统是营销平台的重要微服务之一\",{\"1\":{\"13\":1}}],[\"zk\",{\"1\":{\"13\":1}}],[\"zookeeper\",{\"1\":{\"10\":1}}],[\"微服务架构设计\",{\"1\":{\"15\":1}}],[\"微服务拆分的分布式系统架构\",{\"1\":{\"13\":1}}],[\"微服务抽奖系统\",{\"0\":{\"13\":1}}],[\"领域驱动设计开发\",{\"1\":{\"13\":1}}],[\"领域层\",{\"1\":{\"3\":1,\"20\":1,\"26\":1,\"32\":1,\"38\":1,\"44\":1,\"50\":1,\"56\":1,\"62\":1,\"68\":1,\"76\":1,\"82\":1,\"88\":1,\"94\":1}}],[\"以满足不同场景的需求\",{\"1\":{\"16\":1}}],[\"以\",{\"1\":{\"13\":1}}],[\"以及通过工厂处理服务\",{\"1\":{\"15\":1}}],[\"以及便于不同领域模块的独立设计\",{\"1\":{\"15\":1}}],[\"以及使用提供好的服务类接入\",{\"1\":{\"15\":1}}],[\"以及\",{\"1\":{\"10\":1}}],[\"系统架构\",{\"1\":{\"13\":1,\"16\":1}}],[\"营销活动平台\",{\"0\":{\"13\":1}}],[\"职责\",{\"1\":{\"11\":1}}],[\"岗位\",{\"1\":{\"11\":1}}],[\"洋葱架构设计思想\",{\"1\":{\"10\":1}}],[\"遵守整洁代码\",{\"1\":{\"10\":1}}],[\"四层架构领域驱动设计\",{\"1\":{\"10\":1}}],[\"动静分离等\",{\"1\":{\"10\":1}}],[\"负载均衡\",{\"1\":{\"10\":1}}],[\"not\",{\"1\":{\"98\":1}}],[\"nginx\",{\"1\":{\"10\":1}}],[\"navicat\",{\"1\":{\"10\":1}}],[\"linux\",{\"1\":{\"10\":1}}],[\"lombok\",{\"1\":{\"3\":1,\"20\":1,\"26\":1,\"32\":1,\"38\":1,\"44\":1,\"50\":1,\"56\":1,\"62\":1,\"68\":1,\"76\":1,\"82\":1,\"88\":1,\"94\":1}}],[\"lottery\",{\"0\":{\"13\":1},\"1\":{\"3\":7,\"4\":1,\"20\":7,\"21\":1,\"26\":7,\"27\":1,\"32\":7,\"33\":1,\"38\":7,\"39\":1,\"44\":7,\"45\":1,\"50\":7,\"51\":1,\"56\":7,\"57\":1,\"62\":7,\"63\":1,\"68\":7,\"69\":1,\"76\":7,\"77\":1,\"82\":7,\"83\":1,\"88\":7,\"89\":1,\"94\":7,\"95\":1}}],[\"能够实现基于\",{\"1\":{\"10\":1}}],[\"能从核心原理上解决spring场景问题\",{\"1\":{\"10\":1}}],[\"常用命令\",{\"1\":{\"10\":2}}],[\"常量\",{\"1\":{\"3\":1,\"20\":1,\"26\":1,\"32\":1,\"38\":1,\"44\":1,\"50\":1,\"56\":1,\"62\":1,\"68\":1,\"76\":1,\"82\":1,\"88\":1,\"94\":1}}],[\"plugin\",{\"1\":{\"14\":1}}],[\"pack\",{\"1\":{\"10\":1}}],[\"postman\",{\"1\":{\"10\":1}}],[\"po\",{\"1\":{\"5\":1,\"22\":1,\"28\":1,\"34\":1,\"40\":1,\"46\":1,\"52\":1,\"58\":1,\"64\":1,\"70\":1,\"78\":1,\"84\":1,\"90\":1,\"96\":1}}],[\"pom\",{\"1\":{\"3\":2,\"20\":2,\"26\":2,\"32\":2,\"38\":2,\"44\":2,\"50\":2,\"56\":2,\"62\":2,\"68\":2,\"76\":2,\"82\":2,\"88\":2,\"94\":2}}],[\"搭建了去中心化的量化人群规则引擎组件\",{\"1\":{\"13\":1}}],[\"搭建易于维护和迭代的系统工程\",{\"1\":{\"13\":1}}],[\"搭建整个抽奖系统架构\",{\"1\":{\"13\":1}}],[\"搭建分布式日志收集系统\",{\"1\":{\"10\":1}}],[\"搭建项目结构\",{\"1\":{\"2\":1,\"3\":1,\"19\":1,\"20\":1,\"25\":1,\"26\":1,\"31\":1,\"32\":1,\"37\":1,\"38\":1,\"43\":1,\"44\":1,\"49\":1,\"50\":1,\"55\":1,\"56\":1,\"61\":1,\"62\":1,\"67\":1,\"68\":1,\"75\":1,\"76\":1,\"81\":1,\"82\":1,\"87\":1,\"88\":1,\"93\":1,\"94\":1}}],[\"了解\",{\"1\":{\"10\":1}}],[\"了解分布式搜索引擎\",{\"1\":{\"10\":1}}],[\"了解整个项目的生命周期\",{\"1\":{\"3\":1,\"20\":1,\"26\":1,\"32\":1,\"38\":1,\"44\":1,\"50\":1,\"56\":1,\"62\":1,\"68\":1,\"76\":1,\"82\":1,\"88\":1,\"94\":1}}],[\"分成一块一块的\",{\"1\":{\"64\":1}}],[\"分层结构的处理方式\",{\"1\":{\"13\":1}}],[\"分治和\",{\"1\":{\"13\":1}}],[\"分布式任务调度\",{\"1\":{\"10\":1}}],[\"分布式\",{\"1\":{\"10\":1}}],[\"分布式事务\",{\"1\":{\"10\":1}}],[\"分支上的\",{\"1\":{\"3\":1,\"20\":1,\"26\":1,\"32\":1,\"38\":1,\"44\":1,\"50\":1,\"56\":1,\"62\":1,\"68\":1,\"76\":1,\"82\":1,\"88\":1,\"94\":1}}],[\"缓存穿透等\",{\"1\":{\"10\":1}}],[\"线程模型\",{\"1\":{\"10\":1}}],[\"读写分离技术以及集群的搭建\",{\"1\":{\"10\":1}}],[\"主从同步\",{\"1\":{\"10\":1}}],[\"掌握了数10种设计模式的运用\",{\"1\":{\"14\":1}}],[\"掌握\",{\"1\":{\"10\":2}}],[\"掌握spring解决复杂场景所需的分治\",{\"1\":{\"10\":1}}],[\"服务治理\",{\"0\":{\"16\":1}}],[\"服务\",{\"1\":{\"14\":1,\"15\":1}}],[\"服务器的反向代理\",{\"1\":{\"10\":1}}],[\"服务安全认证架构\",{\"1\":{\"10\":1}}],[\"服务网关路由设计\",{\"1\":{\"10\":1}}],[\"服务降级\",{\"1\":{\"10\":1}}],[\"熔断\",{\"1\":{\"10\":1,\"16\":1}}],[\"限流\",{\"1\":{\"10\":1,\"16\":3}}],[\"监控日志和数据安全等\",{\"1\":{\"10\":1}}],[\"数据库表路由\",{\"1\":{\"10\":1}}],[\"数据库乱码问题\",{\"1\":{\"4\":1,\"21\":1,\"27\":1,\"33\":1,\"39\":1,\"45\":1,\"51\":1,\"57\":1,\"63\":1,\"69\":1,\"77\":1,\"83\":1,\"89\":1,\"95\":1}}],[\"反射\",{\"1\":{\"10\":1}}],[\"包括\",{\"1\":{\"15\":1}}],[\"包括准入\",{\"1\":{\"13\":1}}],[\"包括规则引擎\",{\"1\":{\"13\":1}}],[\"包括会话\",{\"1\":{\"10\":1}}],[\"包括数据库\",{\"1\":{\"3\":1,\"20\":1,\"26\":1,\"32\":1,\"38\":1,\"44\":1,\"50\":1,\"56\":1,\"62\":1,\"68\":1,\"76\":1,\"82\":1,\"88\":1,\"94\":1}}],[\"开发日志\",{\"0\":{\"92\":1}}],[\"开发笔记\",{\"2\":{\"65\":1}}],[\"开发后与\",{\"1\":{\"14\":1}}],[\"开发了统一路由\",{\"1\":{\"13\":1}}],[\"开发了统一路由组件\",{\"1\":{\"13\":1}}],[\"开发企业所需的功能\",{\"1\":{\"10\":1}}],[\"开发\",{\"1\":{\"10\":1}}],[\"同时提供足够的配置选项以满足不同场景的需求\",{\"1\":{\"16\":1}}],[\"同时减少研发成本\",{\"1\":{\"13\":1}}],[\"同时\",{\"1\":{\"10\":1}}],[\"设计并实现服务治理\",{\"1\":{\"16\":1}}],[\"设计模型\",{\"1\":{\"14\":1}}],[\"设计模式\",{\"1\":{\"10\":2}}],[\"设计原则\",{\"1\":{\"10\":1}}],[\"依赖倒置等\",{\"1\":{\"10\":1}}],[\"如果你对接了可以写\",{\"1\":{\"15\":1}}],[\"如创建会话模型\",{\"1\":{\"14\":1}}],[\"如何管理多边服务的设计\",{\"1\":{\"14\":1}}],[\"如数据分页\",{\"1\":{\"10\":1}}],[\"如ioc\",{\"1\":{\"10\":1}}],[\"如工厂\",{\"1\":{\"10\":1}}],[\"调优能力\",{\"1\":{\"10\":2}}],[\"各类垃圾收集器的使用及核心参数的调优\",{\"1\":{\"10\":1}}],[\"熟悉各种缓存高并发的使用场景\",{\"1\":{\"10\":1}}],[\"熟悉各种微服务架构设计比如服务注册与发现\",{\"1\":{\"10\":1}}],[\"熟悉\",{\"1\":{\"10\":4}}],[\"熟练运用\",{\"1\":{\"10\":1}}],[\"熟练使用\",{\"1\":{\"10\":1}}],[\"熟练掌握分布式场景中的常见的技术问题及解决\",{\"1\":{\"10\":1}}],[\"熟练掌握\",{\"1\":{\"10\":5}}],[\"底层原理\",{\"1\":{\"10\":1}}],[\"visual\",{\"1\":{\"10\":1}}],[\"vo啥的各种\",{\"1\":{\"5\":1,\"22\":1,\"28\":1,\"34\":1,\"40\":1,\"46\":1,\"52\":1,\"58\":1,\"64\":1,\"70\":1,\"78\":1,\"84\":1,\"90\":1,\"96\":1}}],[\"代码笔记\",{\"0\":{\"18\":1}}],[\"代码也更易于维护\",{\"1\":{\"15\":1}}],[\"代码分层不清晰\",{\"1\":{\"4\":1,\"21\":1,\"27\":1,\"33\":1,\"39\":1,\"45\":1,\"51\":1,\"57\":1,\"63\":1,\"69\":1,\"77\":1,\"83\":1,\"89\":1,\"95\":1}}],[\"代理\",{\"1\":{\"10\":2,\"13\":1}}],[\"具备\",{\"1\":{\"14\":1}}],[\"具备基于\",{\"1\":{\"10\":1}}],[\"具备一定的\",{\"1\":{\"10\":2}}],[\"具备良好的面向对象编程思想\",{\"1\":{\"10\":1}}],[\"具体怎么跑通\",{\"1\":{\"5\":1,\"22\":1,\"28\":1,\"34\":1,\"40\":1,\"46\":1,\"52\":1,\"58\":1,\"64\":1,\"70\":1,\"78\":1,\"84\":1,\"90\":1,\"96\":1}}],[\"具体还是靠后面的代码进行了解和熟悉吧\",{\"1\":{\"4\":1,\"21\":1,\"27\":1,\"33\":1,\"39\":1,\"45\":1,\"51\":1,\"57\":1,\"63\":1,\"69\":1,\"77\":1,\"83\":1,\"89\":1,\"95\":1}}],[\"具体项目开发是否使用这个插件我不知道\",{\"1\":{\"3\":1,\"20\":1,\"26\":1,\"32\":1,\"38\":1,\"44\":1,\"50\":1,\"56\":1,\"62\":1,\"68\":1,\"76\":1,\"82\":1,\"88\":1,\"94\":1}}],[\"具体的东西在后续代码编写中进行体会\",{\"1\":{\"3\":1,\"20\":1,\"26\":1,\"32\":1,\"38\":1,\"44\":1,\"50\":1,\"56\":1,\"62\":1,\"68\":1,\"76\":1,\"82\":1,\"88\":1,\"94\":1}}],[\"斐波那契散列等\",{\"1\":{\"10\":1}}],[\"hashmap\",{\"1\":{\"10\":1}}],[\"https\",{\"1\":{\"8\":1}}],[\"核心职责\",{\"1\":{\"13\":1,\"15\":1,\"16\":1}}],[\"核心技术\",{\"1\":{\"13\":1,\"15\":1,\"16\":1}}],[\"核心流程模块\",{\"1\":{\"10\":2}}],[\"核心知识\",{\"1\":{\"10\":1}}],[\"核心业务逻辑\",{\"1\":{\"3\":1,\"20\":1,\"26\":1,\"32\":1,\"38\":1,\"44\":1,\"50\":1,\"56\":1,\"62\":1,\"68\":1,\"76\":1,\"82\":1,\"88\":1,\"94\":1}}],[\"成绩\",{\"1\":{\"9\":1,\"11\":1}}],[\"成功\",{\"1\":{\"4\":2,\"21\":2,\"27\":2,\"33\":2,\"39\":2,\"45\":2,\"51\":2,\"57\":2,\"63\":2,\"69\":2,\"77\":2,\"83\":2,\"89\":2,\"95\":2}}],[\"荣誉\",{\"1\":{\"9\":1}}],[\"专业\",{\"1\":{\"9\":1}}],[\"专业技能\",{\"0\":{\"10\":1},\"2\":{\"6\":1,\"17\":1,\"23\":1,\"29\":1,\"35\":1,\"41\":1,\"47\":1,\"53\":1,\"59\":1,\"71\":1,\"73\":1,\"79\":1,\"85\":1,\"91\":1,\"97\":1}}],[\"院校\",{\"1\":{\"9\":1}}],[\"毕业院校\",{\"0\":{\"9\":1}}],[\"毕业时间\",{\"1\":{\"8\":1}}],[\"guava\",{\"1\":{\"15\":1}}],[\"gitee码云\",{\"0\":{\"74\":1}}],[\"git教程\",{\"0\":{\"48\":1}}],[\"git\",{\"1\":{\"10\":1}}],[\"github\",{\"1\":{\"8\":2}}],[\"getter\",{\"1\":{\"4\":1,\"21\":1,\"27\":1,\"33\":1,\"39\":1,\"45\":1,\"51\":1,\"57\":1,\"63\":1,\"69\":1,\"77\":1,\"83\":1,\"89\":1,\"95\":1}}],[\"邮箱\",{\"1\":{\"8\":1}}],[\"电话\",{\"1\":{\"8\":1}}],[\"姓名\",{\"1\":{\"8\":1}}],[\"个人博客搭建\",{\"0\":{\"72\":1}}],[\"个人收获\",{\"1\":{\"14\":1}}],[\"个人信息\",{\"0\":{\"8\":1}}],[\"个人简历\",{\"0\":{\"7\":1}}],[\"项目设计\",{\"0\":{\"86\":1}}],[\"项目库\",{\"0\":{\"36\":1}}],[\"项目的架构设计实现以微服务进行拆分\",{\"1\":{\"15\":1}}],[\"项目架构\",{\"1\":{\"14\":1,\"15\":1}}],[\"项目描述\",{\"1\":{\"13\":1,\"14\":1,\"15\":1,\"16\":1}}],[\"项目经验\",{\"0\":{\"12\":1},\"2\":{\"6\":1,\"17\":1,\"23\":1,\"29\":1,\"35\":1,\"41\":1,\"47\":1,\"53\":1,\"59\":1,\"71\":1,\"79\":1,\"85\":1,\"91\":1,\"97\":1}}],[\"项目整体了解\",{\"1\":{\"3\":1,\"20\":1,\"26\":1,\"32\":1,\"38\":1,\"44\":1,\"50\":1,\"56\":1,\"62\":1,\"68\":1,\"76\":1,\"82\":1,\"88\":1,\"94\":1}}],[\"自我介绍\",{\"2\":{\"6\":1,\"17\":1,\"23\":1,\"29\":1,\"35\":1,\"41\":1,\"47\":1,\"53\":1,\"59\":1,\"71\":1,\"79\":1,\"85\":1,\"91\":1,\"97\":1}}],[\"基础获就在于学到了在开发的过程中要把整个流程切分一下\",{\"1\":{\"64\":1}}],[\"基础\",{\"1\":{\"5\":1,\"22\":1,\"28\":1,\"34\":1,\"40\":1,\"46\":1,\"52\":1,\"58\":1,\"70\":1,\"78\":1,\"84\":1,\"90\":1,\"96\":1}}],[\"基础层\",{\"1\":{\"3\":1,\"20\":1,\"26\":1,\"32\":1,\"38\":1,\"44\":1,\"50\":1,\"56\":1,\"62\":1,\"68\":1,\"76\":1,\"82\":1,\"88\":1,\"94\":1}}],[\"准备晚上再补一补\",{\"1\":{\"5\":1,\"22\":1,\"28\":1,\"34\":1,\"40\":1,\"46\":1,\"52\":1,\"58\":1,\"64\":1,\"70\":1,\"78\":1,\"84\":1,\"90\":1,\"96\":1}}],[\"准备靠代码量进行熟悉\",{\"1\":{\"5\":1,\"22\":1,\"28\":1,\"34\":1,\"40\":1,\"46\":1,\"52\":1,\"58\":1,\"64\":1,\"70\":1,\"78\":1,\"84\":1,\"90\":1,\"96\":1}}],[\"慢慢来\",{\"1\":{\"5\":1,\"22\":1,\"28\":1,\"34\":1,\"40\":1,\"46\":1,\"52\":1,\"58\":1,\"64\":1,\"70\":1,\"78\":1,\"84\":1,\"90\":1,\"96\":1}}],[\"虽然年后要找实习\",{\"1\":{\"5\":1,\"22\":1,\"28\":1,\"34\":1,\"40\":1,\"46\":1,\"52\":1,\"58\":1,\"64\":1,\"70\":1,\"78\":1,\"84\":1,\"90\":1,\"96\":1}}],[\"行则将至嘛\",{\"1\":{\"5\":1,\"22\":1,\"28\":1,\"34\":1,\"40\":1,\"46\":1,\"52\":1,\"58\":1,\"64\":1,\"70\":1,\"78\":1,\"84\":1,\"90\":1,\"96\":1}}],[\"路虽远\",{\"1\":{\"5\":1,\"22\":1,\"28\":1,\"34\":1,\"40\":1,\"46\":1,\"52\":1,\"58\":1,\"64\":1,\"70\":1,\"78\":1,\"84\":1,\"90\":1,\"96\":1}}],[\"也还行\",{\"1\":{\"5\":1,\"22\":1,\"28\":1,\"34\":1,\"40\":1,\"46\":1,\"52\":1,\"58\":1,\"64\":1,\"70\":1,\"78\":1,\"84\":1,\"90\":1,\"96\":1}}],[\"也逐渐熟悉了这样的分层架构\",{\"1\":{\"4\":1,\"21\":1,\"27\":1,\"33\":1,\"39\":1,\"45\":1,\"51\":1,\"57\":1,\"63\":1,\"69\":1,\"77\":1,\"83\":1,\"89\":1,\"95\":1}}],[\"花费了挺长时间的\",{\"1\":{\"5\":1,\"22\":1,\"28\":1,\"34\":1,\"40\":1,\"46\":1,\"52\":1,\"58\":1,\"64\":1,\"70\":1,\"78\":1,\"84\":1,\"90\":1,\"96\":1}}],[\"btest等需求\",{\"1\":{\"13\":1}}],[\"boot\",{\"1\":{\"10\":1}}],[\"bug笔记\",{\"0\":{\"80\":1}}],[\"bug\",{\"1\":{\"5\":1,\"22\":1,\"28\":1,\"34\":1,\"40\":1,\"46\":1,\"52\":1,\"58\":1,\"64\":1,\"70\":1,\"78\":1,\"84\":1,\"90\":1,\"96\":1}}],[\"begindatetime\",{\"1\":{\"4\":2,\"21\":2,\"27\":2,\"33\":2,\"39\":2,\"45\":2,\"51\":2,\"57\":2,\"63\":2,\"69\":2,\"77\":2,\"83\":2,\"89\":2,\"95\":2}}],[\"脑子还有点迷糊\",{\"1\":{\"5\":1,\"22\":1,\"28\":1,\"34\":1,\"40\":1,\"46\":1,\"52\":1,\"58\":1,\"64\":1,\"70\":1,\"78\":1,\"84\":1,\"90\":1,\"96\":1}}],[\"第一天\",{\"1\":{\"5\":1,\"22\":1,\"28\":1,\"34\":1,\"40\":1,\"46\":1,\"52\":1,\"58\":1,\"64\":1,\"70\":1,\"78\":1,\"84\":1,\"90\":1,\"96\":1}}],[\"起来了\",{\"1\":{\"5\":1,\"22\":1,\"28\":1,\"34\":1,\"40\":1,\"46\":1,\"52\":1,\"58\":1,\"64\":1,\"70\":1,\"78\":1,\"84\":1,\"90\":1,\"96\":1}}],[\"要调用其他模块的东西就要添加依赖\",{\"1\":{\"5\":1,\"22\":1,\"28\":1,\"34\":1,\"40\":1,\"46\":1,\"52\":1,\"58\":1,\"64\":1,\"70\":1,\"78\":1,\"84\":1,\"90\":1,\"96\":1}}],[\"就可以关联对应配置的sql语句\",{\"1\":{\"14\":1}}],[\"就带动了所有模块\",{\"1\":{\"5\":1,\"22\":1,\"28\":1,\"34\":1,\"40\":1,\"46\":1,\"52\":1,\"58\":1,\"64\":1,\"70\":1,\"78\":1,\"84\":1,\"90\":1,\"96\":1}}],[\"就跟以前学的\",{\"1\":{\"5\":1,\"22\":1,\"28\":1,\"34\":1,\"40\":1,\"46\":1,\"52\":1,\"58\":1,\"64\":1,\"70\":1,\"78\":1,\"84\":1,\"90\":1,\"96\":1}}],[\"就导致了这个问题\",{\"1\":{\"4\":1,\"21\":1,\"27\":1,\"33\":1,\"39\":1,\"45\":1,\"51\":1,\"57\":1,\"63\":1,\"69\":1,\"77\":1,\"83\":1,\"89\":1,\"95\":1}}],[\"现在在我眼中\",{\"1\":{\"5\":1,\"22\":1,\"28\":1,\"34\":1,\"40\":1,\"46\":1,\"52\":1,\"58\":1,\"64\":1,\"70\":1,\"78\":1,\"84\":1,\"90\":1,\"96\":1}}],[\"写在哪\",{\"1\":{\"5\":1,\"22\":1,\"28\":1,\"34\":1,\"40\":1,\"46\":1,\"52\":1,\"58\":1,\"64\":1,\"70\":1,\"78\":1,\"84\":1,\"90\":1,\"96\":1}}],[\"至少知道了接口写在哪个模块\",{\"1\":{\"5\":1,\"22\":1,\"28\":1,\"34\":1,\"40\":1,\"46\":1,\"52\":1,\"58\":1,\"64\":1,\"70\":1,\"78\":1,\"84\":1,\"90\":1,\"96\":1}}],[\"不太熟悉\",{\"1\":{\"5\":1,\"22\":1,\"28\":1,\"34\":1,\"40\":1,\"46\":1,\"52\":1,\"58\":1,\"64\":1,\"70\":1,\"78\":1,\"84\":1,\"90\":1,\"96\":1}}],[\"不知道每个模块应该干什么事\",{\"1\":{\"4\":1,\"21\":1,\"27\":1,\"33\":1,\"39\":1,\"45\":1,\"51\":1,\"57\":1,\"63\":1,\"69\":1,\"77\":1,\"83\":1,\"89\":1,\"95\":1}}],[\"okhttp3\",{\"1\":{\"15\":2}}],[\"openai\",{\"0\":{\"15\":1},\"1\":{\"15\":5}}],[\"object\",{\"1\":{\"14\":1}}],[\"orm\",{\"1\":{\"10\":1,\"14\":1}}],[\"o\",{\"1\":{\"5\":1,\"22\":1,\"28\":1,\"34\":1,\"40\":1,\"46\":1,\"52\":1,\"58\":1,\"64\":1,\"70\":1,\"78\":1,\"84\":1,\"90\":1,\"96\":1}}],[\"比如分布式锁\",{\"1\":{\"10\":1}}],[\"比如缓存雪崩\",{\"1\":{\"10\":1}}],[\"比如什么dto\",{\"1\":{\"5\":1,\"22\":1,\"28\":1,\"34\":1,\"40\":1,\"46\":1,\"52\":1,\"58\":1,\"64\":1,\"70\":1,\"78\":1,\"84\":1,\"90\":1,\"96\":1}}],[\"比如统一响应数据\",{\"1\":{\"3\":1,\"20\":1,\"26\":1,\"32\":1,\"38\":1,\"44\":1,\"50\":1,\"56\":1,\"62\":1,\"68\":1,\"76\":1,\"82\":1,\"88\":1,\"94\":1}}],[\"由于之前学习一直使用的是\",{\"1\":{\"5\":1,\"22\":1,\"28\":1,\"34\":1,\"40\":1,\"46\":1,\"52\":1,\"58\":1,\"64\":1,\"70\":1,\"78\":1,\"84\":1,\"90\":1,\"96\":1}}],[\"学到了流程切片\",{\"1\":{\"64\":1}}],[\"学到了什么呢\",{\"1\":{\"5\":1,\"22\":1,\"28\":1,\"34\":1,\"40\":1,\"46\":1,\"52\":1,\"58\":1,\"64\":1,\"70\":1,\"78\":1,\"84\":1,\"90\":1,\"96\":1}}],[\"学习记录\",{\"2\":{\"65\":1}}],[\"学习笔记\",{\"0\":{\"24\":1}}],[\"学习过程\",{\"0\":{\"3\":1,\"20\":1,\"26\":1,\"32\":1,\"38\":1,\"44\":1,\"50\":1,\"56\":1,\"62\":1,\"68\":1,\"76\":1,\"82\":1,\"88\":1,\"94\":1}}],[\"学位\",{\"1\":{\"9\":1}}],[\"然后剩下的操作可以使用\",{\"1\":{\"64\":1}}],[\"然后执行一个小的片段\",{\"1\":{\"64\":1}}],[\"然后用\",{\"1\":{\"64\":1}}],[\"然后就写配置呗\",{\"1\":{\"5\":1,\"22\":1,\"28\":1,\"34\":1,\"40\":1,\"46\":1,\"52\":1,\"58\":1,\"64\":1,\"70\":1,\"78\":1,\"84\":1,\"90\":1,\"96\":1}}],[\"然后在\",{\"1\":{\"5\":1,\"22\":1,\"28\":1,\"34\":1,\"40\":1,\"46\":1,\"52\":1,\"58\":1,\"64\":1,\"70\":1,\"78\":1,\"84\":1,\"90\":1,\"96\":1}}],[\"进行后续的操作\",{\"1\":{\"64\":1}}],[\"进行增删改查\",{\"1\":{\"5\":1,\"22\":1,\"28\":1,\"34\":1,\"40\":1,\"46\":1,\"52\":1,\"58\":1,\"64\":1,\"70\":1,\"78\":1,\"84\":1,\"90\":1,\"96\":1}}],[\"进行使用\",{\"1\":{\"3\":1,\"20\":1,\"26\":1,\"32\":1,\"38\":1,\"44\":1,\"50\":1,\"56\":1,\"62\":1,\"68\":1,\"76\":1,\"82\":1,\"88\":1,\"94\":1}}],[\"通过利用springboot的自动化配置机制\",{\"1\":{\"16\":1}}],[\"通过\",{\"1\":{\"14\":1}}],[\"通过业务需求对逻辑的扩展和内置引擎执行器的使用\",{\"1\":{\"13\":1}}],[\"通过对\",{\"1\":{\"3\":1,\"20\":1,\"26\":1,\"32\":1,\"38\":1,\"44\":1,\"50\":1,\"56\":1,\"62\":1,\"68\":1,\"76\":1,\"82\":1,\"88\":1,\"94\":1}}],[\"通过对第一节文档的阅读\",{\"1\":{\"3\":1,\"20\":1,\"26\":1,\"32\":1,\"38\":1,\"44\":1,\"50\":1,\"56\":1,\"62\":1,\"68\":1,\"76\":1,\"82\":1,\"88\":1,\"94\":1}}],[\"通信接口以及对应的请求和响应的封装类\",{\"1\":{\"5\":1,\"22\":1,\"28\":1,\"34\":1,\"40\":1,\"46\":1,\"52\":1,\"58\":1,\"64\":1,\"70\":1,\"78\":1,\"84\":1,\"90\":1,\"96\":1}}],[\"在整套工程的设计实现中\",{\"1\":{\"15\":1}}],[\"在细节对上\",{\"1\":{\"15\":1}}],[\"在实现上采用了\",{\"1\":{\"15\":1}}],[\"在功能域中提供模型\",{\"1\":{\"15\":1}}],[\"在校生无\",{\"0\":{\"11\":1}}],[\"在这里调用\",{\"1\":{\"5\":1,\"22\":1,\"28\":1,\"34\":1,\"40\":1,\"46\":1,\"52\":1,\"58\":1,\"64\":1,\"70\":1,\"78\":1,\"84\":1,\"90\":1,\"96\":1}}],[\"在\",{\"1\":{\"5\":3,\"22\":3,\"28\":3,\"34\":3,\"40\":3,\"46\":3,\"52\":3,\"58\":3,\"64\":3,\"70\":3,\"78\":3,\"84\":3,\"90\":3,\"96\":3}}],[\"配置\",{\"1\":{\"5\":3,\"22\":3,\"28\":3,\"34\":3,\"40\":3,\"46\":3,\"52\":3,\"58\":3,\"64\":3,\"70\":3,\"78\":3,\"84\":3,\"90\":3,\"96\":3}}],[\"配置环境\",{\"1\":{\"5\":1,\"22\":1,\"28\":1,\"34\":1,\"40\":1,\"46\":1,\"52\":1,\"58\":1,\"64\":1,\"70\":1,\"78\":1,\"84\":1,\"90\":1,\"96\":1}}],[\"配置文件\",{\"1\":{\"3\":1,\"20\":1,\"26\":1,\"32\":1,\"38\":1,\"44\":1,\"50\":1,\"56\":1,\"62\":1,\"68\":1,\"76\":1,\"82\":1,\"88\":1,\"94\":1}}],[\"总结\",{\"0\":{\"5\":1,\"22\":1,\"28\":1,\"34\":1,\"40\":1,\"46\":1,\"52\":1,\"58\":1,\"64\":1,\"70\":1,\"78\":1,\"84\":1,\"90\":1,\"96\":1}}],[\"总项目\",{\"1\":{\"3\":1,\"20\":1,\"26\":1,\"32\":1,\"38\":1,\"44\":1,\"50\":1,\"56\":1,\"62\":1,\"68\":1,\"76\":1,\"82\":1,\"88\":1,\"94\":1}}],[\"仅用于插入数据测试\",{\"1\":{\"4\":1,\"21\":1,\"27\":1,\"33\":1,\"39\":1,\"45\":1,\"51\":1,\"57\":1,\"63\":1,\"69\":1,\"77\":1,\"83\":1,\"89\":1,\"95\":1}}],[\"再进行一轮测试\",{\"1\":{\"4\":1,\"21\":1,\"27\":1,\"33\":1,\"39\":1,\"45\":1,\"51\":1,\"57\":1,\"63\":1,\"69\":1,\"77\":1,\"83\":1,\"89\":1,\"95\":1}}],[\"chatgpt\",{\"1\":{\"15\":1}}],[\"chatglm\",{\"1\":{\"15\":1}}],[\"characterencoding=utf\",{\"1\":{\"4\":1,\"21\":1,\"27\":1,\"33\":1,\"39\":1,\"45\":1,\"51\":1,\"57\":1,\"63\":1,\"69\":1,\"77\":1,\"83\":1,\"89\":1,\"95\":1}}],[\"c\",{\"1\":{\"13\":1}}],[\"cloud\",{\"1\":{\"10\":1}}],[\"com\",{\"1\":{\"8\":1}}],[\"common\",{\"1\":{\"3\":1,\"5\":1,\"20\":1,\"22\":1,\"26\":1,\"28\":1,\"32\":1,\"34\":1,\"38\":1,\"40\":1,\"44\":1,\"46\":1,\"50\":1,\"52\":1,\"56\":1,\"58\":1,\"62\":1,\"64\":1,\"68\":1,\"70\":1,\"76\":1,\"78\":1,\"82\":1,\"84\":1,\"88\":1,\"90\":1,\"94\":1,\"96\":1}}],[\"code\",{\"1\":{\"4\":2,\"10\":1,\"21\":2,\"27\":2,\"33\":2,\"39\":2,\"45\":2,\"51\":2,\"57\":2,\"63\":2,\"69\":2,\"77\":2,\"83\":2,\"89\":2,\"95\":2}}],[\"controller\",{\"1\":{\"4\":1,\"21\":1,\"27\":1,\"33\":1,\"39\":1,\"45\":1,\"51\":1,\"57\":1,\"63\":1,\"69\":1,\"77\":1,\"83\":1,\"89\":1,\"95\":1}}],[\"0\",{\"1\":{\"4\":2,\"21\":2,\"27\":2,\"33\":2,\"39\":2,\"45\":2,\"51\":2,\"57\":2,\"63\":2,\"69\":2,\"77\":2,\"83\":2,\"89\":2,\"95\":2}}],[\"0000\",{\"1\":{\"4\":2,\"21\":2,\"27\":2,\"33\":2,\"39\":2,\"45\":2,\"51\":2,\"57\":2,\"63\":2,\"69\":2,\"77\":2,\"83\":2,\"89\":2,\"95\":2}}],[\"jvm\",{\"1\":{\"10\":3}}],[\"juc\",{\"0\":{\"66\":1},\"1\":{\"10\":1}}],[\"java\",{\"0\":{\"42\":1},\"1\":{\"10\":2,\"14\":1}}],[\"jdbc\",{\"1\":{\"4\":1,\"10\":1,\"21\":1,\"27\":1,\"33\":1,\"39\":1,\"45\":1,\"51\":1,\"57\":1,\"63\":1,\"69\":1,\"77\":1,\"83\":1,\"89\":1,\"95\":1}}],[\"json\",{\"1\":{\"4\":1,\"21\":1,\"27\":1,\"33\":1,\"39\":1,\"45\":1,\"51\":1,\"57\":1,\"63\":1,\"69\":1,\"77\":1,\"83\":1,\"89\":1,\"95\":1}}],[\"8000\",{\"1\":{\"13\":1}}],[\"8\",{\"1\":{\"4\":2,\"21\":2,\"27\":2,\"33\":2,\"39\":2,\"45\":2,\"51\":2,\"57\":2,\"63\":2,\"69\":2,\"77\":2,\"83\":2,\"89\":2,\"95\":2}}],[\"并提供了可扩展接口\",{\"1\":{\"16\":1}}],[\"并提高了研发效率\",{\"1\":{\"13\":1}}],[\"并可根据不同场景选择不同范围的敏感词处理\",{\"1\":{\"15\":1}}],[\"并以模块化设计\",{\"1\":{\"15\":1}}],[\"并给出合理的技术方案\",{\"1\":{\"14\":1}}],[\"并把这些复杂的操作\",{\"1\":{\"14\":1}}],[\"并能基于\",{\"1\":{\"10\":1}}],[\"并根据需求结合\",{\"1\":{\"10\":1}}],[\"并善用设计原则构建可复用代码\",{\"1\":{\"10\":1}}],[\"并且命名不太规范\",{\"1\":{\"5\":1,\"22\":1,\"28\":1,\"34\":1,\"40\":1,\"46\":1,\"52\":1,\"58\":1,\"64\":1,\"70\":1,\"78\":1,\"84\":1,\"90\":1,\"96\":1}}],[\"并且通过阅读发现项目没有添加\",{\"1\":{\"3\":1,\"20\":1,\"26\":1,\"32\":1,\"38\":1,\"44\":1,\"50\":1,\"56\":1,\"62\":1,\"68\":1,\"76\":1,\"82\":1,\"88\":1,\"94\":1}}],[\"并没有指定字符集\",{\"1\":{\"4\":1,\"21\":1,\"27\":1,\"33\":1,\"39\":1,\"45\":1,\"51\":1,\"57\":1,\"63\":1,\"69\":1,\"77\":1,\"83\":1,\"89\":1,\"95\":1}}],[\"utf\",{\"1\":{\"4\":1,\"21\":1,\"27\":1,\"33\":1,\"39\":1,\"45\":1,\"51\":1,\"57\":1,\"63\":1,\"69\":1,\"77\":1,\"83\":1,\"89\":1,\"95\":1}}],[\"useunicode=true\",{\"1\":{\"4\":2,\"21\":2,\"27\":2,\"33\":2,\"39\":2,\"45\":2,\"51\":2,\"57\":2,\"63\":2,\"69\":2,\"77\":2,\"83\":2,\"89\":2,\"95\":2}}],[\"url\",{\"1\":{\"4\":2,\"21\":2,\"27\":2,\"33\":2,\"39\":2,\"45\":2,\"51\":2,\"57\":2,\"63\":2,\"69\":2,\"77\":2,\"83\":2,\"89\":2,\"95\":2}}],[\"发现使用了\",{\"1\":{\"4\":1,\"21\":1,\"27\":1,\"33\":1,\"39\":1,\"45\":1,\"51\":1,\"57\":1,\"63\":1,\"69\":1,\"77\":1,\"83\":1,\"89\":1,\"95\":1}}],[\"发现插入的时候就以及乱码了\",{\"1\":{\"4\":1,\"21\":1,\"27\":1,\"33\":1,\"39\":1,\"45\":1,\"51\":1,\"57\":1,\"63\":1,\"69\":1,\"77\":1,\"83\":1,\"89\":1,\"95\":1}}],[\"看了一下配置文件中的数据库连接\",{\"1\":{\"4\":1,\"21\":1,\"27\":1,\"33\":1,\"39\":1,\"45\":1,\"51\":1,\"57\":1,\"63\":1,\"69\":1,\"77\":1,\"83\":1,\"89\":1,\"95\":1}}],[\"查看数据库\",{\"1\":{\"4\":1,\"21\":1,\"27\":1,\"33\":1,\"39\":1,\"45\":1,\"51\":1,\"57\":1,\"63\":1,\"69\":1,\"77\":1,\"83\":1,\"89\":1,\"95\":1}}],[\"明显的乱码问题\",{\"1\":{\"4\":1,\"21\":1,\"27\":1,\"33\":1,\"39\":1,\"45\":1,\"51\":1,\"57\":1,\"63\":1,\"69\":1,\"77\":1,\"83\":1,\"89\":1,\"95\":1}}],[\"typescript\",{\"1\":{\"15\":1}}],[\"tps\",{\"1\":{\"13\":1}}],[\"takecount\",{\"1\":{\"4\":2,\"21\":2,\"27\":2,\"33\":2,\"39\":2,\"45\":2,\"51\":2,\"57\":2,\"63\":2,\"69\":2,\"77\":2,\"83\":2,\"89\":2,\"95\":2}}],[\"tojsonstring\",{\"1\":{\"4\":1,\"21\":1,\"27\":1,\"33\":1,\"39\":1,\"45\":1,\"51\":1,\"57\":1,\"63\":1,\"69\":1,\"77\":1,\"83\":1,\"89\":1,\"95\":1}}],[\"sdk\",{\"1\":{\"15\":4}}],[\"sqlsessionfactory\",{\"1\":{\"14\":1}}],[\"sqlsession\",{\"1\":{\"14\":2}}],[\"sql\",{\"1\":{\"10\":1}}],[\"spring\",{\"1\":{\"10\":4,\"14\":1}}],[\"springboot\",{\"0\":{\"16\":1},\"1\":{\"5\":1,\"10\":1,\"13\":2,\"14\":1,\"15\":1,\"16\":2,\"22\":1,\"28\":1,\"34\":1,\"40\":1,\"46\":1,\"52\":1,\"58\":1,\"64\":1,\"70\":1,\"78\":1,\"84\":1,\"90\":1,\"96\":1}}],[\"svn\",{\"1\":{\"10\":1}}],[\"starter中间件实现了熔断\",{\"1\":{\"16\":1}}],[\"starter\",{\"1\":{\"10\":1,\"13\":1,\"16\":2}}],[\"studio\",{\"1\":{\"10\":1}}],[\"stockcount\",{\"1\":{\"4\":2,\"21\":2,\"27\":2,\"33\":2,\"39\":2,\"45\":2,\"51\":2,\"57\":2,\"63\":2,\"69\":2,\"77\":2,\"83\":2,\"89\":2,\"95\":2}}],[\"session\",{\"1\":{\"10\":1,\"15\":1}}],[\"setter\",{\"1\":{\"4\":1,\"21\":1,\"27\":1,\"33\":1,\"39\":1,\"45\":1,\"51\":1,\"57\":1,\"63\":1,\"69\":1,\"77\":1,\"83\":1,\"89\":1,\"95\":1}}],[\"service\",{\"1\":{\"4\":1,\"21\":1,\"27\":1,\"33\":1,\"39\":1,\"45\":1,\"51\":1,\"57\":1,\"63\":1,\"69\":1,\"77\":1,\"83\":1,\"89\":1,\"95\":1}}],[\"elk+kafka\",{\"1\":{\"10\":1}}],[\"elasticsearch\",{\"1\":{\"10\":1}}],[\"eclipse\",{\"1\":{\"10\":1}}],[\"enddatetime\",{\"1\":{\"4\":2,\"21\":2,\"27\":2,\"33\":2,\"39\":2,\"45\":2,\"51\":2,\"57\":2,\"63\":2,\"69\":2,\"77\":2,\"83\":2,\"89\":2,\"95\":2}}],[\"es\",{\"1\":{\"3\":1,\"13\":1,\"20\":1,\"26\":1,\"32\":1,\"38\":1,\"44\":1,\"50\":1,\"56\":1,\"62\":1,\"68\":1,\"76\":1,\"82\":1,\"88\":1,\"94\":1}}],[\"1705218054000\",{\"1\":{\"4\":2,\"21\":2,\"27\":2,\"33\":2,\"39\":2,\"45\":2,\"51\":2,\"57\":2,\"63\":2,\"69\":2,\"77\":2,\"83\":2,\"89\":2,\"95\":2}}],[\"1705215282000\",{\"1\":{\"4\":2,\"21\":2,\"27\":2,\"33\":2,\"39\":2,\"45\":2,\"51\":2,\"57\":2,\"63\":2,\"69\":2,\"77\":2,\"83\":2,\"89\":2,\"95\":2}}],[\"1\",{\"0\":{\"13\":1},\"1\":{\"4\":1,\"21\":1,\"27\":1,\"33\":1,\"39\":1,\"45\":1,\"51\":1,\"57\":1,\"63\":1,\"69\":1,\"77\":1,\"83\":1,\"89\":1,\"95\":1}}],[\"127\",{\"1\":{\"4\":1,\"21\":1,\"27\":1,\"33\":1,\"39\":1,\"45\":1,\"51\":1,\"57\":1,\"63\":1,\"69\":1,\"77\":1,\"83\":1,\"89\":1,\"95\":1}}],[\"10\",{\"1\":{\"4\":2,\"21\":2,\"27\":2,\"33\":2,\"39\":2,\"45\":2,\"51\":2,\"57\":2,\"63\":2,\"69\":2,\"77\":2,\"83\":2,\"89\":2,\"95\":2}}],[\"100003\",{\"1\":{\"4\":1,\"21\":1,\"27\":1,\"33\":1,\"39\":1,\"45\":1,\"51\":1,\"57\":1,\"63\":1,\"69\":1,\"77\":1,\"83\":1,\"89\":1,\"95\":1}}],[\"100002\",{\"1\":{\"4\":1,\"21\":1,\"27\":1,\"33\":1,\"39\":1,\"45\":1,\"51\":1,\"57\":1,\"63\":1,\"69\":1,\"77\":1,\"83\":1,\"89\":1,\"95\":1}}],[\"100\",{\"1\":{\"4\":2,\"21\":2,\"27\":2,\"33\":2,\"39\":2,\"45\":2,\"51\":2,\"57\":2,\"63\":2,\"69\":2,\"77\":2,\"83\":2,\"89\":2,\"95\":2}}],[\"测试活动\",{\"1\":{\"4\":1,\"21\":1,\"27\":1,\"33\":1,\"39\":1,\"45\":1,\"51\":1,\"57\":1,\"63\":1,\"69\":1,\"77\":1,\"83\":1,\"89\":1,\"95\":1}}],[\"测试结果\",{\"1\":{\"4\":3,\"21\":3,\"27\":3,\"33\":3,\"39\":3,\"45\":3,\"51\":3,\"57\":3,\"63\":3,\"69\":3,\"77\":3,\"83\":3,\"89\":3,\"95\":3}}],[\"测试模块\",{\"1\":{\"4\":1,\"21\":1,\"27\":1,\"33\":1,\"39\":1,\"45\":1,\"51\":1,\"57\":1,\"63\":1,\"69\":1,\"77\":1,\"83\":1,\"89\":1,\"95\":1}}],[\"远程调用返回的结果为\",{\"1\":{\"4\":1,\"21\":1,\"27\":1,\"33\":1,\"39\":1,\"45\":1,\"51\":1,\"57\":1,\"63\":1,\"69\":1,\"77\":1,\"83\":1,\"89\":1,\"95\":1}}],[\"忘了加\",{\"1\":{\"4\":1,\"21\":1,\"27\":1,\"33\":1,\"39\":1,\"45\":1,\"51\":1,\"57\":1,\"63\":1,\"69\":1,\"77\":1,\"83\":1,\"89\":1,\"95\":1}}],[\"问题出现原因\",{\"1\":{\"4\":1,\"21\":1,\"27\":1,\"33\":1,\"39\":1,\"45\":1,\"51\":1,\"57\":1,\"63\":1,\"69\":1,\"77\":1,\"83\":1,\"89\":1,\"95\":1}}],[\"但是还是慌不得\",{\"1\":{\"5\":1,\"22\":1,\"28\":1,\"34\":1,\"40\":1,\"46\":1,\"52\":1,\"58\":1,\"64\":1,\"70\":1,\"78\":1,\"84\":1,\"90\":1,\"96\":1}}],[\"但是至少是跑起来了吧\",{\"1\":{\"5\":1,\"22\":1,\"28\":1,\"34\":1,\"40\":1,\"46\":1,\"52\":1,\"58\":1,\"64\":1,\"70\":1,\"78\":1,\"84\":1,\"90\":1,\"96\":1}}],[\"但是后来经过大量代码的编写\",{\"1\":{\"4\":1,\"21\":1,\"27\":1,\"33\":1,\"39\":1,\"45\":1,\"51\":1,\"57\":1,\"63\":1,\"69\":1,\"77\":1,\"83\":1,\"89\":1,\"95\":1}}],[\"但是我想用\",{\"1\":{\"3\":1,\"20\":1,\"26\":1,\"32\":1,\"38\":1,\"44\":1,\"50\":1,\"56\":1,\"62\":1,\"68\":1,\"76\":1,\"82\":1,\"88\":1,\"94\":1}}],[\"和\",{\"1\":{\"4\":1,\"21\":1,\"27\":1,\"33\":1,\"39\":1,\"45\":1,\"51\":1,\"57\":1,\"63\":1,\"69\":1,\"77\":1,\"83\":1,\"89\":1,\"95\":1}}],[\"哈哈哈哈\",{\"1\":{\"64\":1}}],[\"哈哈哈\",{\"1\":{\"4\":1,\"21\":1,\"27\":1,\"33\":1,\"39\":1,\"45\":1,\"51\":1,\"57\":1,\"63\":1,\"69\":1,\"77\":1,\"83\":1,\"89\":1,\"95\":1}}],[\"遇到的问题\",{\"0\":{\"4\":1,\"21\":1,\"27\":1,\"33\":1,\"39\":1,\"45\":1,\"51\":1,\"57\":1,\"63\":1,\"69\":1,\"77\":1,\"83\":1,\"89\":1,\"95\":1}}],[\"yml\",{\"1\":{\"3\":1,\"20\":1,\"26\":1,\"32\":1,\"38\":1,\"44\":1,\"50\":1,\"56\":1,\"62\":1,\"68\":1,\"76\":1,\"82\":1,\"88\":1,\"94\":1}}],[\"编写测试模块\",{\"1\":{\"3\":1,\"20\":1,\"26\":1,\"32\":1,\"38\":1,\"44\":1,\"50\":1,\"56\":1,\"62\":1,\"68\":1,\"76\":1,\"82\":1,\"88\":1,\"94\":1}}],[\"编写配置文件\",{\"1\":{\"3\":1,\"20\":1,\"26\":1,\"32\":1,\"38\":1,\"44\":1,\"50\":1,\"56\":1,\"62\":1,\"68\":1,\"76\":1,\"82\":1,\"88\":1,\"94\":1}}],[\"编写启动类\",{\"1\":{\"3\":1,\"20\":1,\"26\":1,\"32\":1,\"38\":1,\"44\":1,\"50\":1,\"56\":1,\"62\":1,\"68\":1,\"76\":1,\"82\":1,\"88\":1,\"94\":1}}],[\"idao\",{\"1\":{\"14\":1}}],[\"idea\",{\"1\":{\"10\":1}}],[\"iactivitybooth\",{\"1\":{\"3\":2,\"20\":2,\"26\":2,\"32\":2,\"38\":2,\"44\":2,\"50\":2,\"56\":2,\"62\":2,\"68\":2,\"76\":2,\"82\":2,\"88\":2,\"94\":2}}],[\"info\",{\"1\":{\"4\":2,\"21\":2,\"27\":2,\"33\":2,\"39\":2,\"45\":2,\"51\":2,\"57\":2,\"63\":2,\"69\":2,\"77\":2,\"83\":2,\"89\":2,\"95\":2}}],[\"infrastructure\",{\"1\":{\"3\":1,\"5\":1,\"20\":1,\"22\":1,\"26\":1,\"28\":1,\"32\":1,\"34\":1,\"38\":1,\"40\":1,\"44\":1,\"46\":1,\"50\":1,\"52\":1,\"56\":1,\"58\":1,\"62\":1,\"64\":1,\"68\":1,\"70\":1,\"76\":1,\"78\":1,\"82\":1,\"84\":1,\"88\":1,\"90\":1,\"94\":1,\"96\":1}}],[\"initproject\",{\"1\":{\"3\":1,\"20\":1,\"26\":1,\"32\":1,\"38\":1,\"44\":1,\"50\":1,\"56\":1,\"62\":1,\"68\":1,\"76\":1,\"82\":1,\"88\":1,\"94\":1}}],[\"interfaces\",{\"1\":{\"3\":1,\"5\":2,\"20\":1,\"22\":2,\"26\":1,\"28\":2,\"32\":1,\"34\":2,\"38\":1,\"40\":2,\"44\":1,\"46\":2,\"50\":1,\"52\":2,\"56\":1,\"58\":2,\"62\":1,\"64\":2,\"68\":1,\"70\":2,\"76\":1,\"78\":2,\"82\":1,\"84\":2,\"88\":1,\"90\":2,\"94\":1,\"96\":2}}],[\"请求对象\",{\"1\":{\"3\":1,\"20\":1,\"26\":1,\"32\":1,\"38\":1,\"44\":1,\"50\":1,\"56\":1,\"62\":1,\"68\":1,\"76\":1,\"82\":1,\"88\":1,\"94\":1}}],[\"的全体系开发流程和对应的技术整合\",{\"1\":{\"14\":1}}],[\"的独占锁\",{\"1\":{\"13\":1}}],[\"的需求\",{\"1\":{\"13\":1}}],[\"的扩展使用\",{\"1\":{\"10\":1}}],[\"的核心数据结构的使用场景\",{\"1\":{\"10\":1}}],[\"的技能\",{\"1\":{\"10\":1}}],[\"的服务提供者一样吧\",{\"1\":{\"5\":1,\"22\":1,\"28\":1,\"34\":1,\"40\":1,\"46\":1,\"52\":1,\"58\":1,\"64\":1,\"70\":1,\"78\":1,\"84\":1,\"90\":1,\"96\":1}}],[\"的呢\",{\"1\":{\"5\":1,\"22\":1,\"28\":1,\"34\":1,\"40\":1,\"46\":1,\"52\":1,\"58\":1,\"64\":1,\"70\":1,\"78\":1,\"84\":1,\"90\":1,\"96\":1}}],[\"的时候最开始也不清楚为什么要这样分层\",{\"1\":{\"4\":1,\"21\":1,\"27\":1,\"33\":1,\"39\":1,\"45\":1,\"51\":1,\"57\":1,\"63\":1,\"69\":1,\"77\":1,\"83\":1,\"89\":1,\"95\":1}}],[\"的响应对象\",{\"1\":{\"3\":1,\"20\":1,\"26\":1,\"32\":1,\"38\":1,\"44\":1,\"50\":1,\"56\":1,\"62\":1,\"68\":1,\"76\":1,\"82\":1,\"88\":1,\"94\":1}}],[\"的\",{\"1\":{\"3\":1,\"13\":1,\"20\":1,\"26\":1,\"32\":1,\"38\":1,\"44\":1,\"50\":1,\"56\":1,\"62\":1,\"68\":1,\"76\":1,\"82\":1,\"88\":1,\"94\":1}}],[\"的数据传输对象\",{\"1\":{\"3\":1,\"20\":1,\"26\":1,\"32\":1,\"38\":1,\"44\":1,\"50\":1,\"56\":1,\"62\":1,\"68\":1,\"76\":1,\"82\":1,\"88\":1,\"94\":1}}],[\"xdb\",{\"1\":{\"13\":2}}],[\"x\",{\"1\":{\"10\":1}}],[\"xml\",{\"1\":{\"3\":1,\"20\":1,\"26\":1,\"32\":1,\"38\":1,\"44\":1,\"50\":1,\"56\":1,\"62\":1,\"68\":1,\"76\":1,\"82\":1,\"88\":1,\"94\":1}}],[\"xfg\",{\"1\":{\"3\":1,\"20\":1,\"26\":1,\"32\":1,\"38\":1,\"44\":1,\"50\":1,\"56\":1,\"62\":1,\"68\":1,\"76\":1,\"82\":1,\"88\":1,\"94\":1}}],[\"mq\",{\"1\":{\"13\":1,\"15\":1,\"64\":2}}],[\"mapping\",{\"1\":{\"14\":1}}],[\"mapper\",{\"1\":{\"3\":2,\"5\":2,\"20\":2,\"22\":2,\"26\":2,\"28\":2,\"32\":2,\"34\":2,\"38\":2,\"40\":2,\"44\":2,\"46\":2,\"50\":2,\"52\":2,\"56\":2,\"58\":2,\"62\":2,\"64\":2,\"68\":2,\"70\":2,\"76\":2,\"78\":2,\"82\":2,\"84\":2,\"88\":2,\"90\":2,\"94\":2,\"96\":2}}],[\"maven\",{\"1\":{\"10\":1}}],[\"mysql\",{\"1\":{\"4\":1,\"10\":2,\"13\":1,\"21\":1,\"27\":1,\"33\":1,\"39\":1,\"45\":1,\"51\":1,\"57\":1,\"63\":1,\"69\":1,\"77\":1,\"83\":1,\"89\":1,\"95\":1}}],[\"mybatis\",{\"0\":{\"14\":1},\"1\":{\"3\":1,\"5\":1,\"10\":2,\"13\":1,\"14\":9,\"15\":1,\"20\":1,\"22\":1,\"26\":1,\"28\":1,\"32\":1,\"34\":1,\"38\":1,\"40\":1,\"44\":1,\"46\":1,\"50\":1,\"52\":1,\"56\":1,\"58\":1,\"62\":1,\"64\":1,\"68\":1,\"70\":1,\"76\":1,\"78\":1,\"82\":1,\"84\":1,\"88\":1,\"90\":1,\"94\":1,\"96\":1}}],[\"mvc\",{\"1\":{\"4\":1,\"5\":1,\"21\":1,\"22\":1,\"27\":1,\"28\":1,\"33\":1,\"34\":1,\"39\":1,\"40\":1,\"45\":1,\"46\":1,\"51\":1,\"52\":1,\"57\":1,\"58\":1,\"63\":1,\"64\":1,\"69\":1,\"70\":1,\"77\":1,\"78\":1,\"83\":1,\"84\":1,\"89\":1,\"90\":1,\"95\":1,\"96\":1}}],[\"接口接入\",{\"1\":{\"15\":1}}],[\"接口实现类在哪个模块以及\",{\"1\":{\"5\":1,\"22\":1,\"28\":1,\"34\":1,\"40\":1,\"46\":1,\"52\":1,\"58\":1,\"64\":1,\"70\":1,\"78\":1,\"84\":1,\"90\":1,\"96\":1}}],[\"接口以及和数据库相对应的\",{\"1\":{\"5\":1,\"22\":1,\"28\":1,\"34\":1,\"40\":1,\"46\":1,\"52\":1,\"58\":1,\"64\":1,\"70\":1,\"78\":1,\"84\":1,\"90\":1,\"96\":1}}],[\"接口\",{\"1\":{\"3\":3,\"14\":1,\"20\":3,\"26\":3,\"32\":3,\"38\":3,\"44\":3,\"50\":3,\"56\":3,\"62\":3,\"68\":3,\"76\":3,\"82\":3,\"88\":3,\"94\":3}}],[\"接口文件\",{\"1\":{\"3\":1,\"20\":1,\"26\":1,\"32\":1,\"38\":1,\"44\":1,\"50\":1,\"56\":1,\"62\":1,\"68\":1,\"76\":1,\"82\":1,\"88\":1,\"94\":1}}],[\"表的\",{\"1\":{\"3\":2,\"20\":2,\"26\":2,\"32\":2,\"38\":2,\"44\":2,\"50\":2,\"56\":2,\"62\":2,\"68\":2,\"76\":2,\"82\":2,\"88\":2,\"94\":2}}],[\"表的持久化对象\",{\"1\":{\"3\":1,\"20\":1,\"26\":1,\"32\":1,\"38\":1,\"44\":1,\"50\":1,\"56\":1,\"62\":1,\"68\":1,\"76\":1,\"82\":1,\"88\":1,\"94\":1}}],[\"api\",{\"1\":{\"15\":3}}],[\"application\",{\"1\":{\"3\":2,\"20\":2,\"26\":2,\"32\":2,\"38\":2,\"44\":2,\"50\":2,\"56\":2,\"62\":2,\"68\":2,\"76\":2,\"82\":2,\"88\":2,\"94\":2}}],[\"a\",{\"1\":{\"13\":1}}],[\"aop\",{\"1\":{\"10\":1}}],[\"activityname\",{\"1\":{\"4\":2,\"21\":2,\"27\":2,\"33\":2,\"39\":2,\"45\":2,\"51\":2,\"57\":2,\"63\":2,\"69\":2,\"77\":2,\"83\":2,\"89\":2,\"95\":2}}],[\"activityid\",{\"1\":{\"4\":2,\"21\":2,\"27\":2,\"33\":2,\"39\":2,\"45\":2,\"51\":2,\"57\":2,\"63\":2,\"69\":2,\"77\":2,\"83\":2,\"89\":2,\"95\":2}}],[\"activitydesc\",{\"1\":{\"4\":2,\"21\":2,\"27\":2,\"33\":2,\"39\":2,\"45\":2,\"51\":2,\"57\":2,\"63\":2,\"69\":2,\"77\":2,\"83\":2,\"89\":2,\"95\":2}}],[\"activitydto\",{\"1\":{\"3\":1,\"20\":1,\"26\":1,\"32\":1,\"38\":1,\"44\":1,\"50\":1,\"56\":1,\"62\":1,\"68\":1,\"76\":1,\"82\":1,\"88\":1,\"94\":1}}],[\"activityres\",{\"1\":{\"3\":1,\"20\":1,\"26\":1,\"32\":1,\"38\":1,\"44\":1,\"50\":1,\"56\":1,\"62\":1,\"68\":1,\"76\":1,\"82\":1,\"88\":1,\"94\":1}}],[\"activityreq\",{\"1\":{\"3\":1,\"20\":1,\"26\":1,\"32\":1,\"38\":1,\"44\":1,\"50\":1,\"56\":1,\"62\":1,\"68\":1,\"76\":1,\"82\":1,\"88\":1,\"94\":1}}],[\"activity\",{\"1\":{\"3\":3,\"4\":2,\"20\":3,\"21\":2,\"26\":3,\"27\":2,\"32\":3,\"33\":2,\"38\":3,\"39\":2,\"44\":3,\"45\":2,\"50\":3,\"51\":2,\"56\":3,\"57\":2,\"62\":3,\"63\":2,\"68\":3,\"69\":2,\"76\":3,\"77\":2,\"82\":3,\"83\":2,\"88\":3,\"89\":2,\"94\":3,\"95\":2}}],[\"类\",{\"1\":{\"3\":1,\"5\":1,\"20\":1,\"22\":1,\"26\":1,\"28\":1,\"32\":1,\"34\":1,\"38\":1,\"40\":1,\"44\":1,\"46\":1,\"50\":1,\"52\":1,\"56\":1,\"58\":1,\"62\":1,\"64\":1,\"68\":1,\"70\":1,\"76\":1,\"78\":1,\"82\":1,\"84\":1,\"88\":1,\"90\":1,\"94\":1,\"96\":1}}],[\"状态码枚举供通用返回对象\",{\"1\":{\"3\":1,\"20\":1,\"26\":1,\"32\":1,\"38\":1,\"44\":1,\"50\":1,\"56\":1,\"62\":1,\"68\":1,\"76\":1,\"82\":1,\"88\":1,\"94\":1}}],[\"定义抽奖过程标准和实现对应的多类型抽奖的服务模块\",{\"1\":{\"13\":1}}],[\"定义通用返回对象\",{\"1\":{\"3\":1,\"20\":1,\"26\":1,\"32\":1,\"38\":1,\"44\":1,\"50\":1,\"56\":1,\"62\":1,\"68\":1,\"76\":1,\"82\":1,\"88\":1,\"94\":1}}],[\"定义通用数据\",{\"1\":{\"3\":1,\"20\":1,\"26\":1,\"32\":1,\"38\":1,\"44\":1,\"50\":1,\"56\":1,\"62\":1,\"68\":1,\"76\":1,\"82\":1,\"88\":1,\"94\":1}}],[\"定义\",{\"1\":{\"3\":9,\"20\":9,\"26\":9,\"32\":9,\"38\":9,\"44\":9,\"50\":9,\"56\":9,\"62\":9,\"68\":9,\"76\":9,\"82\":9,\"88\":9,\"94\":9}}],[\"跑通\",{\"1\":{\"3\":1,\"5\":1,\"20\":1,\"22\":1,\"26\":1,\"28\":1,\"32\":1,\"34\":1,\"38\":1,\"40\":1,\"44\":1,\"46\":1,\"50\":1,\"52\":1,\"56\":1,\"58\":1,\"62\":1,\"64\":1,\"68\":1,\"70\":1,\"76\":1,\"78\":1,\"82\":1,\"84\":1,\"88\":1,\"90\":1,\"94\":1,\"96\":1}}],[\"跑通广播模式\",{\"1\":{\"2\":1,\"19\":1,\"25\":1,\"31\":1,\"37\":1,\"43\":1,\"49\":1,\"55\":1,\"61\":1,\"67\":1,\"75\":1,\"81\":1,\"87\":1,\"93\":1}}],[\"更加清楚的了解这个项目所使用的技术\",{\"1\":{\"3\":1,\"20\":1,\"26\":1,\"32\":1,\"38\":1,\"44\":1,\"50\":1,\"56\":1,\"62\":1,\"68\":1,\"76\":1,\"82\":1,\"88\":1,\"94\":1}}],[\"文件的阅读\",{\"1\":{\"3\":1,\"20\":1,\"26\":1,\"32\":1,\"38\":1,\"44\":1,\"50\":1,\"56\":1,\"62\":1,\"68\":1,\"76\":1,\"82\":1,\"88\":1,\"94\":1}}],[\"文件\",{\"1\":{\"3\":2,\"20\":2,\"26\":2,\"32\":2,\"38\":2,\"44\":2,\"50\":2,\"56\":2,\"62\":2,\"68\":2,\"76\":2,\"82\":2,\"88\":2,\"94\":2}}],[\"文档\",{\"0\":{\"1\":1}}],[\"阅读\",{\"1\":{\"3\":1,\"20\":1,\"26\":1,\"32\":1,\"38\":1,\"44\":1,\"50\":1,\"56\":1,\"62\":1,\"68\":1,\"76\":1,\"82\":1,\"88\":1,\"94\":1}}],[\"所以对这部分内容添加了敏感词的过滤\",{\"1\":{\"15\":1}}],[\"所以对于包的命名现在很不适应\",{\"1\":{\"5\":1,\"22\":1,\"28\":1,\"34\":1,\"40\":1,\"46\":1,\"52\":1,\"58\":1,\"64\":1,\"70\":1,\"78\":1,\"84\":1,\"90\":1,\"96\":1}}],[\"所以在这部分设计的时候\",{\"1\":{\"15\":1}}],[\"所以有些小\",{\"1\":{\"5\":1,\"22\":1,\"28\":1,\"34\":1,\"40\":1,\"46\":1,\"52\":1,\"58\":1,\"64\":1,\"70\":1,\"78\":1,\"84\":1,\"90\":1,\"96\":1}}],[\"所以这个模块起起来之后\",{\"1\":{\"5\":1,\"22\":1,\"28\":1,\"34\":1,\"40\":1,\"46\":1,\"52\":1,\"58\":1,\"64\":1,\"70\":1,\"78\":1,\"84\":1,\"90\":1,\"96\":1}}],[\"所以就会引用其他模块\",{\"1\":{\"5\":1,\"22\":1,\"28\":1,\"34\":1,\"40\":1,\"46\":1,\"52\":1,\"58\":1,\"64\":1,\"70\":1,\"78\":1,\"84\":1,\"90\":1,\"96\":1}}],[\"所以就给加上了😄\",{\"1\":{\"3\":1,\"20\":1,\"26\":1,\"32\":1,\"38\":1,\"44\":1,\"50\":1,\"56\":1,\"62\":1,\"68\":1,\"76\":1,\"82\":1,\"88\":1,\"94\":1}}],[\"所以添加一下\",{\"1\":{\"4\":1,\"21\":1,\"27\":1,\"33\":1,\"39\":1,\"45\":1,\"51\":1,\"57\":1,\"63\":1,\"69\":1,\"77\":1,\"83\":1,\"89\":1,\"95\":1}}],[\"所以现在并不想解决这个问题\",{\"1\":{\"4\":1,\"21\":1,\"27\":1,\"33\":1,\"39\":1,\"45\":1,\"51\":1,\"57\":1,\"63\":1,\"69\":1,\"77\":1,\"83\":1,\"89\":1,\"95\":1}}],[\"所以每个模块目前只有模糊的概念\",{\"1\":{\"3\":1,\"20\":1,\"26\":1,\"32\":1,\"38\":1,\"44\":1,\"50\":1,\"56\":1,\"62\":1,\"68\":1,\"76\":1,\"82\":1,\"88\":1,\"94\":1}}],[\"所需要的技术以及代码提交规范\",{\"1\":{\"3\":1,\"20\":1,\"26\":1,\"32\":1,\"38\":1,\"44\":1,\"50\":1,\"56\":1,\"62\":1,\"68\":1,\"76\":1,\"82\":1,\"88\":1,\"94\":1}}],[\"架构\",{\"1\":{\"3\":1,\"5\":1,\"15\":1,\"20\":1,\"22\":1,\"26\":1,\"28\":1,\"32\":1,\"34\":1,\"38\":1,\"40\":1,\"44\":1,\"46\":1,\"50\":1,\"52\":1,\"56\":1,\"58\":1,\"62\":1,\"64\":1,\"68\":1,\"70\":1,\"76\":1,\"78\":1,\"82\":1,\"84\":1,\"88\":1,\"90\":1,\"94\":1,\"96\":1}}],[\"docker+jenkins\",{\"1\":{\"10\":1}}],[\"docker\",{\"1\":{\"10\":1}}],[\"domain\",{\"1\":{\"3\":1,\"20\":1,\"26\":1,\"32\":1,\"38\":1,\"44\":1,\"50\":1,\"56\":1,\"62\":1,\"68\":1,\"76\":1,\"82\":1,\"88\":1,\"94\":1}}],[\"dubbo\",{\"1\":{\"5\":3,\"10\":1,\"13\":1,\"22\":3,\"28\":3,\"34\":3,\"40\":3,\"46\":3,\"52\":3,\"58\":3,\"64\":3,\"70\":3,\"78\":3,\"84\":3,\"90\":3,\"96\":3}}],[\"day1\",{\"0\":{\"60\":1}}],[\"data\",{\"1\":{\"4\":1,\"21\":1,\"27\":1,\"33\":1,\"39\":1,\"45\":1,\"51\":1,\"57\":1,\"63\":1,\"69\":1,\"77\":1,\"83\":1,\"89\":1,\"95\":1}}],[\"dao\",{\"1\":{\"4\":1,\"5\":1,\"21\":1,\"22\":1,\"27\":1,\"28\":1,\"33\":1,\"34\":1,\"39\":1,\"40\":1,\"45\":1,\"46\":1,\"51\":1,\"52\":1,\"57\":1,\"58\":1,\"63\":1,\"64\":1,\"69\":1,\"70\":1,\"77\":1,\"78\":1,\"83\":1,\"84\":1,\"89\":1,\"90\":1,\"95\":1,\"96\":1}}],[\"dto\",{\"1\":{\"3\":1,\"20\":1,\"26\":1,\"32\":1,\"38\":1,\"44\":1,\"50\":1,\"56\":1,\"62\":1,\"68\":1,\"76\":1,\"82\":1,\"88\":1,\"94\":1}}],[\"ddd\",{\"1\":{\"3\":1,\"10\":1,\"13\":3,\"15\":2,\"20\":1,\"26\":1,\"32\":1,\"38\":1,\"44\":1,\"50\":1,\"56\":1,\"62\":1,\"68\":1,\"76\":1,\"82\":1,\"88\":1,\"94\":1}}],[\"注意\",{\"1\":{\"15\":1}}],[\"注解\",{\"1\":{\"4\":1,\"21\":1,\"27\":1,\"33\":1,\"39\":1,\"45\":1,\"51\":1,\"57\":1,\"63\":1,\"69\":1,\"77\":1,\"83\":1,\"89\":1,\"95\":1}}],[\"注\",{\"1\":{\"3\":1,\"20\":1,\"26\":1,\"32\":1,\"38\":1,\"44\":1,\"50\":1,\"56\":1,\"62\":1,\"68\":1,\"76\":1,\"82\":1,\"88\":1,\"94\":1}}],[\"展现数据相关的代码\",{\"1\":{\"3\":1,\"20\":1,\"26\":1,\"32\":1,\"38\":1,\"44\":1,\"50\":1,\"56\":1,\"62\":1,\"68\":1,\"76\":1,\"82\":1,\"88\":1,\"94\":1}}],[\"存放与前端交互\",{\"1\":{\"3\":1,\"20\":1,\"26\":1,\"32\":1,\"38\":1,\"44\":1,\"50\":1,\"56\":1,\"62\":1,\"68\":1,\"76\":1,\"82\":1,\"88\":1,\"94\":1}}],[\"用户体验很不好\",{\"1\":{\"64\":1}}],[\"用户不需要感知到这一切\",{\"1\":{\"64\":1}}],[\"用户接口层\",{\"1\":{\"3\":1,\"20\":1,\"26\":1,\"32\":1,\"38\":1,\"44\":1,\"50\":1,\"56\":1,\"62\":1,\"68\":1,\"76\":1,\"82\":1,\"88\":1,\"94\":1}}],[\"用来管理整个项目的依赖\",{\"1\":{\"3\":1,\"20\":1,\"26\":1,\"32\":1,\"38\":1,\"44\":1,\"50\":1,\"56\":1,\"62\":1,\"68\":1,\"76\":1,\"82\":1,\"88\":1,\"94\":1}}],[\"等常用的消息中间件进行消息的异步数据处理\",{\"1\":{\"10\":1}}],[\"等分布式服务协调与治理等技术\",{\"1\":{\"10\":1}}],[\"等微服务框架的设计原理及底层架构\",{\"1\":{\"10\":1}}],[\"等开发工具\",{\"1\":{\"10\":1}}],[\"等\",{\"1\":{\"3\":1,\"15\":1,\"20\":1,\"26\":1,\"32\":1,\"38\":1,\"44\":1,\"50\":1,\"56\":1,\"62\":1,\"68\":1,\"76\":1,\"82\":1,\"88\":1,\"94\":1}}],[\"router\",{\"1\":{\"13\":2}}],[\"rabbitmq\",{\"1\":{\"10\":1}}],[\"run\",{\"1\":{\"5\":1,\"22\":1,\"28\":1,\"34\":1,\"40\":1,\"46\":1,\"52\":1,\"58\":1,\"64\":1,\"70\":1,\"78\":1,\"84\":1,\"90\":1,\"96\":1}}],[\"react\",{\"1\":{\"15\":2}}],[\"relational\",{\"1\":{\"14\":1}}],[\"result\",{\"1\":{\"3\":2,\"4\":2,\"20\":2,\"21\":2,\"26\":2,\"27\":2,\"32\":2,\"33\":2,\"38\":2,\"39\":2,\"44\":2,\"45\":2,\"50\":2,\"51\":2,\"56\":2,\"57\":2,\"62\":2,\"63\":2,\"68\":2,\"69\":2,\"76\":2,\"77\":2,\"82\":2,\"83\":2,\"88\":2,\"89\":2,\"94\":2,\"95\":2}}],[\"response\",{\"1\":{\"3\":1,\"20\":1,\"26\":1,\"32\":1,\"38\":1,\"44\":1,\"50\":1,\"56\":1,\"62\":1,\"68\":1,\"76\":1,\"82\":1,\"88\":1,\"94\":1}}],[\"redis\",{\"1\":{\"3\":1,\"10\":2,\"13\":2,\"15\":1,\"20\":1,\"26\":1,\"32\":1,\"38\":1,\"44\":1,\"50\":1,\"56\":1,\"62\":1,\"68\":1,\"76\":1,\"82\":1,\"88\":1,\"94\":1}}],[\"rpc\",{\"1\":{\"2\":1,\"3\":7,\"4\":1,\"5\":5,\"19\":1,\"20\":7,\"21\":1,\"22\":5,\"25\":1,\"26\":7,\"27\":1,\"28\":5,\"31\":1,\"32\":7,\"33\":1,\"34\":5,\"37\":1,\"38\":7,\"39\":1,\"40\":5,\"43\":1,\"44\":7,\"45\":1,\"46\":5,\"49\":1,\"50\":7,\"51\":1,\"52\":5,\"55\":1,\"56\":7,\"57\":1,\"58\":5,\"61\":1,\"62\":7,\"63\":1,\"64\":5,\"67\":1,\"68\":7,\"69\":1,\"70\":5,\"75\":1,\"76\":7,\"77\":1,\"78\":5,\"81\":1,\"82\":7,\"83\":1,\"84\":5,\"87\":1,\"88\":7,\"89\":1,\"90\":5,\"93\":1,\"94\":7,\"95\":1,\"96\":5}}],[\"为xxx场景提效\",{\"1\":{\"15\":1}}],[\"为以后编程工作\",{\"1\":{\"14\":1}}],[\"为此\",{\"1\":{\"14\":1}}],[\"为适应系统规模可快速开发和使用的方式\",{\"1\":{\"13\":1}}],[\"为复杂项目提供通用技术组件\",{\"1\":{\"10\":1}}],[\"为什么就要分\",{\"1\":{\"4\":1,\"21\":1,\"27\":1,\"33\":1,\"39\":1,\"45\":1,\"51\":1,\"57\":1,\"63\":1,\"69\":1,\"77\":1,\"83\":1,\"89\":1,\"95\":1}}],[\"为其他各层提供通用技术能力\",{\"1\":{\"3\":1,\"20\":1,\"26\":1,\"32\":1,\"38\":1,\"44\":1,\"50\":1,\"56\":1,\"62\":1,\"68\":1,\"76\":1,\"82\":1,\"88\":1,\"94\":1}}],[\"为用户接口层提供各种应用数据展现支持服务\",{\"1\":{\"3\":1,\"20\":1,\"26\":1,\"32\":1,\"38\":1,\"44\":1,\"50\":1,\"56\":1,\"62\":1,\"68\":1,\"76\":1,\"82\":1,\"88\":1,\"94\":1}}],[\"枚举等\",{\"1\":{\"3\":1,\"20\":1,\"26\":1,\"32\":1,\"38\":1,\"44\":1,\"50\":1,\"56\":1,\"62\":1,\"68\":1,\"76\":1,\"82\":1,\"88\":1,\"94\":1}}],[\"作用\",{\"1\":{\"3\":1,\"20\":1,\"26\":1,\"32\":1,\"38\":1,\"44\":1,\"50\":1,\"56\":1,\"62\":1,\"68\":1,\"76\":1,\"82\":1,\"88\":1,\"94\":1}}],[\"理解每个模块应该干什么\",{\"1\":{\"3\":1,\"20\":1,\"26\":1,\"32\":1,\"38\":1,\"44\":1,\"50\":1,\"56\":1,\"62\":1,\"68\":1,\"76\":1,\"82\":1,\"88\":1,\"94\":1}}],[\"过程调用\",{\"1\":{\"2\":1,\"19\":1,\"25\":1,\"31\":1,\"37\":1,\"43\":1,\"49\":1,\"55\":1,\"61\":1,\"67\":1,\"75\":1,\"81\":1,\"87\":1,\"93\":1}}],[\"环境配置\",{\"1\":{\"2\":1,\"19\":1,\"25\":1,\"31\":1,\"37\":1,\"43\":1,\"49\":1,\"55\":1,\"61\":1,\"67\":1,\"75\":1,\"81\":1,\"87\":1,\"93\":1}}],[\"任务\",{\"0\":{\"2\":1,\"19\":1,\"25\":1,\"31\":1,\"37\":1,\"43\":1,\"49\":1,\"55\":1,\"61\":1,\"67\":1,\"75\":1,\"81\":1,\"87\":1,\"93\":1}}],[\"介绍页\",{\"0\":{\"0\":1}}]],\"version\":2}"